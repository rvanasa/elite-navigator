{"version":3,"sources":["services/connection-service.js","components/Contexts.js","services/galaxy-service.js","components/Attributes.js","components/item/Item.js","components/ExpandableList.js","components/item/Station.js","components/SettingToggle.js","components/item/Ship.js","components/item/Module.js","components/item/Body.js","components/SearchResult.js","components/item/StarSystem.js","components/item/SignalSource.js","services/player-service.js","components/item/JournalEntry.js","components/item/Category.js","components/BodyCompact.js","components/LoadingMain.js","components/App.js","serviceWorker.js","index.js"],"names":["relayAddress","currentConnection","pendingPromise","tryConnect","roomName","a","close","Promise","resolve","reject","events","EventEmitter","socket","io","connect","sources","Set","on","console","log","emit","document","addEventListener","visibilityListener","visibilityState","connected","removeEventListener","id","role","add","has","delete","size","resetPlayer","msg","err","error","args","GalaxyContext","React","createContext","SelectContext","SearchContext","FilterContext","SettingsContext","cache","setupCache","maxAge","api","axios","create","adapter","Galaxy","data","this","ships","modules","systems","stations","bodies","assert","Object","keys","every","k","hasOwnProperty","materialTypes","ringTypes","searchOptions","_relativeSystem","_sortedSystems","_sortedStations","_sortedBodies","text","toString","toLowerCase","replace","split","map","s","trim","filter","sort","type","option","_type","_searchTerms","name","values","attributes","v","flatMap","_getSearchTerms","push","dict","key","ship","_resolve","module","system","station","Array","isArray","getSystem","body","b","dx","x","dy","y","dz","z","Math","round","sqrt","forEach","updateDistance","d","_distanceModifier","_currentDistance","_children","c","getDistanceBetweenSystems","filterFn","count","results","arguments","length","Number","POSITIVE_INFINITY","slice","rings","ring","query","queryTerms","textTerms","some","q","t","startsWith","matches","opt","terms","minTermLen","opts","optsLen","termsLen","i","hasAllTerms","j","term","termLen","optTerms","optTermsLen","foundTerm","optTerm","substring","includes","getShipAttributes","getModuleAttributes","groupName","class","rating","category","mode","getSystemAttributes","allegiance","power","powerState","states","join","reserveType","population","getStationAttributes","Type","economies","services","prepareData","items","item","ref","value","entries","$resolve","loadGalaxy","get","galaxy","defineProperty","_registerSearch","starDistance","currentGalaxyPromise","defaultGalaxy","Attributes","props","hideKeys","className","toLocaleString","Item","handle","variant","icon","sub","below","detail","children","useState","isSelected","setSelected","detailSelected","setDetailSelected","filterContext","useContext","selectContext","searchContext","ancestors","selected","relevantAttributes","isRelevant","isFavorite","favorites","borderStyle","style","background","borderLeft","borderTop","borderRight","borderBottom","onSwipedLeft","removeFavorite","onSwipedRight","addFavorite","opacity","onClick","e","stopPropagation","position","top","marginTop","whiteSpace","subSelectContext","Provider","renderDetail","ExpandableList","ignoreFilter","ignoreSort","render","maxItems","setMaxItems","Station","getStation","Icon","planetary","GiPlanetCore","GiDefenseSatellite","StarSystem","SettingToggle","setting","label","inverted","onToggle","settings","Form","Group","set","Check","readOnly","checked","Ship","getShip","pilot","nearbyStations","getNearestStations","onlyDiscounts","SearchResult","result","Module","getModule","Body","getBody","BsBrightnessLow","GiVibratingBall","resultMap","renderFn","Error","permitRequired","SignalSource","signalSource","capitalCase","threat","currentSystemEvents","Player","journal","discoveries","_currentSystem","event","entry","journalEntries","timestamp","Date","getTime","index","findIndex","uid","unshift","WasDiscovered","WasMapped","BodyName","other","TerraformState","commanderEntry","getMostRecent","Name","SystemName","StarPos","Population","createBodyFromJournalEntry","terraformable","BodyID","PlanetClass","StarType","Subclass","Luminosity","Rings","RingClass","DistanceFromArrivalLS","firstDiscovered","MassEM","sentenceCase","Atmosphere","Volcanism","Landable","createShipFromJournalEntry","Ship_Localised","PilotName_Localised","Commander","createSignalFromJournalEntry","USSType_Localised","USSThreat","JournalEntry","internal","setItem","cached","obj","time","internalComponent","StationName","From_Localised","Message_Localised","getUTCHours","padStart","getUTCMinutes","Category","player","systemName","playerMapped","classNames","minWidth","LoadingMain","maxWidth","animationDuration","src","alt","connectionListener","allowAutoConnect","App","setSettings","setPlayer","setGalaxy","connection","setConnection","reconnecting","setReconnecting","customSystemName","setCustomSystemName","undefined","currentTab","setCurrentTab","searchQuery","setSearchQuery","searchResults","setSearchResults","setFavorites","layout","queryString","parse","window","location","search","transmitSettings","overlay","disconnect","changes","removeListener","update","catch","findGalaxy","then","playerSystem","getCurrentSystem","relativeSystem","setRelativeSystem","parseInt","hideEvents","isEntryVisible","doSearch","searchText","searchBarElem","onSelectTab","tab","select","focus","backgroundColor","overlayContent","localeCompare","_isSearchRelevant","InputGroup","placeholder","elem","onChange","target","Tabs","activeKey","onSelect","Tab","eventKey","title","getNearestSystems","getNearestRingBodies","allResourceTypes","onFocus","Button","href","rel","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.93ae6e2d.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\nimport {EventEmitter} from 'events';\r\n\r\nconst relayAddress = 'https://elite-navigator.herokuapp.com';\r\n\r\nlet currentConnection = null;\r\nlet pendingPromise = null;\r\n\r\n// export function getCurrentConnection() {\r\n//     return currentConnection;\r\n// }\r\n\r\nexport async function tryConnect(roomName) {\r\n    roomName = roomName || 'elite-navigator';///\r\n\r\n    if(currentConnection) {\r\n        currentConnection.close();\r\n    }\r\n\r\n    currentConnection = null;\r\n    pendingPromise = new Promise((resolve, reject) => {\r\n\r\n        let events = new EventEmitter();\r\n\r\n        let socket = io.connect(relayAddress);\r\n        currentConnection = socket;\r\n\r\n        let sources = new Set();\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Connected');\r\n\r\n            socket.emit('join', roomName, 'webapp');\r\n\r\n            let visibilityListener = () => {\r\n                if(socket !== currentConnection) {\r\n                    document.removeEventListener('visibilitychange', visibilityListener);\r\n                    return;\r\n                }\r\n                if(document.visibilityState === 'visible' && !socket.connected) {\r\n                    socket.connect();\r\n                }\r\n            };\r\n            document.addEventListener('visibilitychange', visibilityListener);\r\n\r\n            // pendingAddress = pendingPromise = null;\r\n            resolve(events);\r\n        });\r\n\r\n        socket.on('join', (id, role) => {\r\n            console.log('Joined:', id, ':', role);\r\n\r\n            if(role === 'uplink') {\r\n                sources.add(id);\r\n            }\r\n        });\r\n\r\n        socket.on('leave', id => {\r\n            console.log('Left:', id);\r\n\r\n            if(sources.has(id)) {\r\n                sources.delete(id);\r\n\r\n                if(!sources.size) {\r\n                    events.emit('data', {resetPlayer: true});\r\n                }\r\n            }\r\n        });\r\n\r\n        socket.on('msg', (msg, id, role) => {\r\n            console.log('>', id, msg, role);\r\n\r\n            events.emit('msg', msg, id, role);\r\n        });\r\n\r\n        socket.on('error', err => {\r\n            console.error(err);\r\n\r\n            // pendingAddress = pendingPromise = null;\r\n            reject(err);\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            console.log('Disconnected');\r\n\r\n            events.emit('data', {resetPlayer: true});\r\n        });\r\n\r\n        events.on('msg', (...args) => {\r\n            socket.emit('msg', ...args);\r\n        });\r\n    });\r\n    return pendingPromise;\r\n}","import React from 'react';\r\n\r\nexport const GalaxyContext = React.createContext(null);\r\n\r\nexport const SelectContext = React.createContext(null);\r\n\r\nexport const SearchContext = React.createContext(null);\r\n\r\nexport const FilterContext = React.createContext(null);\r\n\r\nexport const SettingsContext = React.createContext(null);\r\n","import axios from 'axios';\r\nimport {setupCache} from 'axios-cache-adapter';\r\n\r\nconst cache = setupCache({\r\n    maxAge: 1000 * 60 * 4,\r\n});\r\n\r\nconst api = axios.create({\r\n    adapter: cache.adapter,\r\n});\r\n\r\nconst starDistanceFactor = 1e-4;\r\n\r\nclass Galaxy {\r\n    constructor(data) {\r\n        this.ships = data.ships || {};\r\n        this.modules = data.modules || {};\r\n        this.systems = data.systems || {};\r\n        this.stations = data.stations || {};\r\n        this.bodies = data.bodies || {};\r\n\r\n        console.assert(Object.keys(data).every(k => this.hasOwnProperty(k)));\r\n\r\n        this.materialTypes = ['Raw', 'Manufactured', 'Encoded'];\r\n        this.ringTypes = ['Rocky', 'Icy', 'Metallic', 'Metal Rich'];\r\n\r\n        this.searchOptions = [];\r\n\r\n        this._relativeSystem = null;\r\n        this._sortedSystems = [];\r\n        this._sortedStations = [];\r\n        this._sortedBodies = [];\r\n    }\r\n\r\n    _getSearchTerms(text) {\r\n        if(!text) {\r\n            return [];\r\n        }\r\n        return [...new Set(text.toString().toLowerCase().replace(/[^a-z0-9 ]/, ' ').split(' ').map(s => s.trim()).filter(s => !!s))].sort();\r\n    }\r\n\r\n    _registerSearch(type, option) {\r\n        option._type = type;\r\n        option._searchTerms = [\r\n            ...new Set([option.name, ...Object.values(option.attributes).filter(v => typeof v === 'string')]\r\n                .filter(s => !!s)\r\n                .flatMap(s => this._getSearchTerms(s))\r\n                .map(s => s.trim())\r\n                .filter(s => s)),\r\n        ].sort();\r\n        this.searchOptions.push(option);\r\n        return option;\r\n    }\r\n\r\n    _resolve(dict, key) {\r\n        return (typeof key === 'string' ? dict[key.toLowerCase()] : typeof key === 'number' ? dict[key] : key) || null;\r\n    }\r\n\r\n    getShip(ship) {\r\n        return this._resolve(this.ships, ship);\r\n    }\r\n\r\n    getModule(module) {\r\n        return this._resolve(this.modules, module);\r\n    }\r\n\r\n    getSystem(system) {\r\n        return this._resolve(this.systems, system);\r\n    }\r\n\r\n    getStation(station) {\r\n        if(Array.isArray(station)) {\r\n            let system = this.getSystem(station[0]);\r\n            return (system && system.stations[station[1]]) || null;\r\n        }\r\n        return this._resolve(this.stations, station);\r\n    }\r\n\r\n    getBody(body) {\r\n        return this._resolve(this.bodies, body);\r\n    }\r\n\r\n    getDistanceBetweenSystems(a, b) {\r\n        let [dx, dy, dz] = [a.x - b.x, a.y - b.y, a.z - b.z];\r\n        return Math.round(Math.sqrt(dx ** 2 + dy ** 2 + dz ** 2));\r\n    }\r\n\r\n    getRelativeSystem() {\r\n        return this._relativeSystem;\r\n    }\r\n\r\n    setRelativeSystem(system) {\r\n        system = this.getSystem(system);\r\n        if(this._relativeSystem === system) {\r\n            return system;\r\n        }\r\n        this._relativeSystem = system;\r\n        let updateDistance = (d, s) => {\r\n            d *= 1 + (s._distanceModifier || 0);\r\n            // if(s.name === 'Sol') {\r\n            //     console.log(d, s._currentDistance, s._distanceModifier || 0);///////////////////////\r\n            // }\r\n            s._currentDistance = d;\r\n            if(s._children) {\r\n                s._children.forEach(c => updateDistance(d, c));\r\n            }\r\n        };\r\n        this._sortedSystems.forEach(s => updateDistance(system ? this.getDistanceBetweenSystems(system, s) : 0, s));\r\n        this._sortedSystems.sort((a, b) => system ? a._currentDistance - b._currentDistance : a.name - b.name);\r\n\r\n        this._sortedStations.sort((a, b) => system ? a._currentDistance - b._currentDistance : a.name - b.name);\r\n\r\n        this._sortedBodies.sort((a, b) => system ? a._currentDistance - b._currentDistance : a.name - b.name);\r\n        return system;\r\n    }\r\n\r\n    getNearestSystems(filterFn, count) {\r\n        let results = [];\r\n        if(arguments.length < 2) {\r\n            count = Number.POSITIVE_INFINITY;\r\n        }\r\n        else if(count <= 0) {\r\n            return results;\r\n        }\r\n        if(!filterFn) {\r\n            return this._sortedSystems.slice(0, count);\r\n        }\r\n        for(let system of this._sortedSystems) {\r\n            if(filterFn(system)) {\r\n                results.push(system);\r\n                if(results.length >= count) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    getNearestStations(filterFn, count) {\r\n        let results = [];\r\n        if(arguments.length < 2) {\r\n            count = Number.POSITIVE_INFINITY;\r\n        }\r\n        else if(count <= 0) {\r\n            return results;\r\n        }\r\n        if(!filterFn) {\r\n            return this._sortedStations.slice(0, count);\r\n        }\r\n        for(let station of this._sortedStations) {\r\n            if(filterFn(station)) {\r\n                results.push(station);\r\n                if(results.length >= count) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    getNearestRingBodies(type, count) {\r\n        let results = [];\r\n        if(count <= 0) {\r\n            return results;\r\n        }\r\n        for(let body of this._sortedBodies) {\r\n            if(body.rings) {\r\n                for(let ring of body.rings) {\r\n                    if(!type || ring.type === type) {\r\n                        results.push(body);\r\n                        break;\r\n                    }\r\n                }\r\n                if(results.length >= count) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    _isSearchRelevant(query, text) {\r\n        if(!query || !text) {\r\n            return !!query;\r\n        }\r\n        let queryTerms = this._getSearchTerms(query);\r\n        let textTerms = this._getSearchTerms(text);\r\n        return queryTerms.some(q => textTerms.some(t => t.startsWith(q)));\r\n    }\r\n\r\n    search(query) {\r\n        if(!query.trim()) {\r\n            return [];\r\n        }\r\n        let matches = this.searchOptions.filter(opt => opt.name && opt.name.toLowerCase() === query);\r\n        let results = [];\r\n        let terms = this._getSearchTerms(query);\r\n        if(!terms.length) {\r\n            return results;\r\n        }\r\n\r\n        let minTermLen = 3 - terms.length;\r\n        let opts = this.searchOptions;\r\n        let optsLen = opts.length;\r\n        let termsLen = terms.length;\r\n        for(let i = 0; i < optsLen; i++) {\r\n            let opt = opts[i];\r\n            let hasAllTerms = true;\r\n            for(let j = 0; j < termsLen; j++) {\r\n                let term = terms[j];\r\n                let termLen = term.length;\r\n                if(termLen < minTermLen) {\r\n                    termLen = minTermLen;\r\n                }\r\n\r\n                let optTerms = opt._searchTerms;\r\n                let optTermsLen = optTerms.length;\r\n\r\n                let foundTerm = false;\r\n                for(let k = 0; k < optTermsLen; k++) {\r\n                    let optTerm = optTerms[k].substring(0, termLen);\r\n                    if(optTerm === term) {\r\n                        foundTerm = true;\r\n                    }\r\n                    if(optTerm >= term) {\r\n                        break;\r\n                    }\r\n                }\r\n                if(!foundTerm) {\r\n                    hasAllTerms = false;\r\n                    break;\r\n                }\r\n            }\r\n            if(hasAllTerms && !matches.includes(opt)) {\r\n                results.push(opt);\r\n            }\r\n        }\r\n\r\n        results.sort((a, b) => (a._currentDistance || 0) - (b._currentDistance || 0));\r\n        return [...matches, ...results];\r\n    }\r\n}\r\n\r\nfunction getShipAttributes() {\r\n    return {};\r\n}\r\n\r\nfunction getModuleAttributes() {\r\n    return {\r\n        'Group': this.groupName,\r\n        'Class': `${this.class}${this.rating}`,\r\n        'Ship': this.ship && this.ship.name,\r\n        'Category': this.category,\r\n        'Mode': this.mode,\r\n    };\r\n}\r\n\r\nfunction getSystemAttributes() {\r\n    return {\r\n        'Allegiance': this.allegiance,\r\n        'Power': this.power,\r\n        // 'Minor faction': this.faction,\r\n        'Power state': this.powerState,\r\n        'System state': this.states.join(', '),\r\n        'Resources': this.reserveType,\r\n        'Habitation': this.population ? 'Populated' : 'Unpopulated',\r\n        'Population': this.population,\r\n    };\r\n}\r\n\r\nfunction getStationAttributes() {\r\n    return {\r\n        'Type': this.Type,\r\n        'Economy': this.economies.join(', '),\r\n        'Services': this.services.join(', '),\r\n    };\r\n}\r\n\r\nfunction prepareData(data) {\r\n    for(let items of Object.values(data)) {\r\n        for(let item of Object.values(items)) {\r\n            for(let [key, ref] of Object.entries(item.$resolve)) {\r\n                let value = item[key];\r\n                if(Array.isArray(value)) {\r\n                    item[key] = value.map(v => data[ref][v]);\r\n                }\r\n                else {\r\n                    item[key] = data[ref][value];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\nexport async function loadGalaxy() {\r\n    console.log('Loading galaxy...');\r\n\r\n    let data = prepareData((await api.get('data/galaxy.json')).data);\r\n\r\n    let galaxy = new Galaxy(data);\r\n\r\n    for(let ship of Object.values(galaxy.ships)) {\r\n        // ship._type = 'ship';////\r\n\r\n        Object.defineProperty(ship, 'attributes', {get: getShipAttributes});\r\n\r\n        galaxy._registerSearch('ship', ship);\r\n    }\r\n    for(let module of Object.values(galaxy.modules)) {\r\n        Object.defineProperty(module, 'attributes', {get: getModuleAttributes});\r\n\r\n        galaxy._registerSearch('module', module);\r\n    }\r\n    for(let system of Object.values(galaxy.systems)) {\r\n        Object.defineProperty(system, 'attributes', {get: getSystemAttributes});\r\n\r\n        galaxy.systems[system.name.toLowerCase()] = system;////\r\n        galaxy._sortedSystems.push(system);\r\n\r\n        system.stations.sort((a, b) => a.starDistance - b.starDistance);///\r\n        system.bodies.sort((a, b) => a.starDistance - b.starDistance);///\r\n\r\n        system._children = [...system.stations, ...system.bodies]\r\n            .sort((a, b) => a.starDistance - b.starDistance);///\r\n\r\n        galaxy._registerSearch('system', system);\r\n    }\r\n    for(let station of Object.values(galaxy.stations)) {\r\n        Object.defineProperty(station, 'attributes', {get: getStationAttributes});\r\n\r\n        galaxy._sortedStations.push(station);\r\n\r\n        station._distanceModifier = station.starDistance * starDistanceFactor;\r\n\r\n        galaxy._registerSearch('station', station);\r\n    }\r\n    for(let body of Object.values(data.bodies)) {\r\n        body._type = 'body'; ////////\r\n\r\n        galaxy._sortedBodies.push(body);\r\n\r\n        body._distanceModifier = body.starDistance * starDistanceFactor;\r\n    }\r\n    return galaxy;\r\n}\r\n\r\nlet currentGalaxyPromise = null;\r\n\r\nlet defaultGalaxy = new Galaxy({});\r\n\r\nexport function getDefaultGalaxy() {\r\n    return defaultGalaxy;\r\n}\r\n\r\n\r\nexport async function findGalaxy() {\r\n    if(!currentGalaxyPromise) {\r\n        currentGalaxyPromise = loadGalaxy();\r\n    }\r\n    return currentGalaxyPromise;\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Attributes(props) {\r\n    let {attributes, hideKeys} = props;\r\n    \r\n    if(!attributes) {\r\n        return null;\r\n    }\r\n    \r\n    return (<>\r\n        {Object.entries(attributes).filter(([, v]) => v).map(([k, v]) => (\r\n            <div key={k}>\r\n                {!hideKeys && k !== v && (\r\n                    <small className=\"text-secondary\">{k}:</small>\r\n                )}\r\n                <small className=\"text-muted d-inline-block\">{typeof v === 'number' ? v.toLocaleString() : v}</small>\r\n            </div>\r\n        ))}\r\n    </>);\r\n};\r\n","import React, {useContext, useState} from 'react';\r\nimport {FilterContext, SearchContext, SelectContext} from '../Contexts';\r\nimport Attributes from '../Attributes';\r\nimport {Swipeable} from 'react-swipeable';\r\n\r\nexport default function Item(props) {\r\n    let {handle, variant, icon, name, sub, below, detail, children} = props;\r\n    \r\n    let [isSelected, setSelected] = useState(false);\r\n    let [detailSelected, setDetailSelected] = useState(null);\r\n    \r\n    let filterContext = useContext(FilterContext);\r\n    let selectContext = useContext(SelectContext);\r\n    let searchContext = useContext(SearchContext);\r\n    \r\n    handle = handle || `${variant}${name}${sub}`;/////\r\n    if(!name) {\r\n        name = handle.name;\r\n    }\r\n    \r\n    if(selectContext.ancestors.includes(handle)) {\r\n        return null;\r\n    }\r\n    \r\n    if(selectContext.selected !== handle) {\r\n        isSelected = false;\r\n    }\r\n    else if(detailSelected) {\r\n        isSelected = true;\r\n    }\r\n    \r\n    if(!isSelected && selectContext.selected) {\r\n        variant = 'muted';\r\n    }\r\n    \r\n    function toggleSelected() {\r\n        setSelected(!isSelected);\r\n        selectContext.setSelected(isSelected ? null : handle);\r\n        setDetailSelected(null);///\r\n    }\r\n    \r\n    let relevantAttributes = null;\r\n    if(searchContext && handle.attributes) {\r\n        relevantAttributes = {};\r\n        Object.entries(handle.attributes).forEach(([k, v]) => {\r\n            if((!name || !name.includes(v)) && searchContext.isRelevant(v)) {\r\n                relevantAttributes[k] = v;\r\n            }\r\n        });\r\n    }\r\n    \r\n    let isFavorite = filterContext.favorites.includes(handle);/////\r\n    \r\n    function renderDetail() {\r\n        let subSelectContext = {\r\n            selected: detailSelected,\r\n            setSelected: item => setDetailSelected(item) & setSelected(true),\r\n            ancestors: [...selectContext.ancestors, handle],\r\n        };\r\n        return (\r\n            <SelectContext.Provider value={subSelectContext}>\r\n                <div className=\"p-2 pt-1\" style={{background: '#080808'}}>\r\n                    {detail && detail(subSelectContext)}\r\n                    {children}\r\n                </div>\r\n            </SelectContext.Provider>\r\n        );\r\n    }\r\n    \r\n    let borderColor = '#424345';\r\n    let favoriteColor = '#5b5ad5';\r\n    let borderStyle = 'solid 2px ' + (isFavorite ? favoriteColor : borderColor);\r\n    \r\n    return (\r\n        <div className=\"m-0 mb-1 rounded-lg\"\r\n             style={{\r\n                 background: isSelected ? '#333' : '#1A1A1A',\r\n                 borderLeft: detail ? `solid 6px ${!isSelected && selectContext.selected ? borderColor : isFavorite ? favoriteColor : '#76777A'}` : borderStyle,\r\n                 borderTop: borderStyle,\r\n                 borderRight: borderStyle,\r\n                 borderBottom: borderStyle,\r\n                 // animation: isFavorite && 'swipe-right .4s ease-out',\r\n             }}>\r\n            <Swipeable\r\n                onSwipedLeft={() => filterContext.removeFavorite(handle)}\r\n                onSwipedRight={() => filterContext.addFavorite(handle)}>\r\n                <div className=\"cursor-pointer p-2\"\r\n                     style={{\r\n                         opacity: !isSelected && selectContext.selected ? .8 : 1,/////\r\n                     }}\r\n                     onClick={selectContext && detail && (e => e.stopPropagation() & toggleSelected())}>\r\n                    <div className=\"d-flex\">\r\n                        {(icon || name) && (\r\n                            <span className={`m-0 text-${variant} flex-grow-1`}>\r\n                                {icon && (\r\n                                    <span\r\n                                        className=\"mr-2\"\r\n                                        style={{position: 'relative', top: '-2px', opacity: .9}}>\r\n                                        {icon}\r\n                                    </span>\r\n                                )}\r\n                                {name}\r\n                            </span>\r\n                        )}\r\n                        {sub && (\r\n                            <small className={`float-right text-${variant}`}\r\n                                   style={{marginTop: '2px', whiteSpace: 'nowrap', opacity: .9}}>\r\n                                {sub}\r\n                            </small>\r\n                        )}\r\n                    </div>\r\n                    {below}\r\n                    {!isSelected && relevantAttributes && (\r\n                        <Attributes hideKeys attributes={relevantAttributes}/>\r\n                    )}\r\n                </div>\r\n            </Swipeable>\r\n            {!isSelected && (<>\r\n                {children && (\r\n                    <div className=\"px-2\">\r\n                        {children}\r\n                    </div>\r\n                )}\r\n            </>)}\r\n            {isSelected && renderDetail()}\r\n        </div>\r\n    );\r\n};\r\n","import React, {useContext, useState} from 'react';\r\nimport {FilterContext} from './Contexts';\r\n\r\nexport default function ExpandableList(props) {\r\n    let {items, size, ignoreFilter, ignoreSort, render} = props;\r\n    \r\n    let [maxItems, setMaxItems] = useState(size || 1);\r\n    \r\n    let filterContext = useContext(FilterContext);\r\n    \r\n    if(!items || !items.length) {\r\n        return null;\r\n    }\r\n    \r\n    if(filterContext) {\r\n        if(!ignoreFilter) {\r\n            items = items.filter(filterContext.filter);\r\n        }\r\n        if(!ignoreSort) {\r\n            items = [...items.filter(x => filterContext.favorites.includes(x)), ...items.filter(x => !filterContext.favorites.includes(x))];\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"my-1\">\r\n            {items.slice(0, maxItems).map(render)}\r\n            {items.length > maxItems && (\r\n                <span className=\"btn btn-outline-secondary d-block mt-2\"\r\n                      onClick={() => setMaxItems(maxItems * 2)}>\r\n                    Show more\r\n                </span>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport StarSystem from './StarSystem';\r\nimport {GalaxyContext} from '../Contexts';\r\nimport Item from './Item';\r\nimport {GiDefenseSatellite, GiPlanetCore} from 'react-icons/all';\r\nimport Attributes from '../Attributes';\r\n\r\nexport default function Station(props) {\r\n    let {station} = props;\r\n    \r\n    let galaxy = useContext(GalaxyContext);\r\n    \r\n    station = galaxy.getStation(station);\r\n    if(!station) {\r\n        return <Item variant=\"secondary\" name={typeof props.station === 'string' ? props.station : '(Station)'}/>;\r\n    }\r\n    \r\n    let Icon = station.planetary ? GiPlanetCore : GiDefenseSatellite;\r\n    \r\n    return (\r\n        <Item variant=\"warning\"\r\n              handle={station}\r\n              icon={<Icon/>}\r\n              sub={station.starDistance ? station.starDistance.toLocaleString() + ' Ls' : ''}\r\n              detail={() => (\r\n                  <Attributes attributes={station.attributes}/>\r\n              )}>\r\n            {station.system && (\r\n                <StarSystem system={station.system}/>\r\n            )}\r\n        </Item>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport {SettingsContext} from './Contexts';\r\nimport {Form} from 'react-bootstrap';\r\n\r\nexport default function SettingToggle(props) {\r\n    let {setting, label, inverted, onToggle} = props;\r\n\r\n    let settings = useContext(SettingsContext);\r\n\r\n    function onClick(e) {\r\n        let value = !settings[setting];\r\n        settings.set({[setting]: value});\r\n        if(onToggle) {\r\n            onToggle(value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form>\r\n            <Form.Group className=\"my-2\" onClick={onClick}>\r\n                <Form.Check readOnly checked={!!settings[setting] === !inverted} label={label || setting}/>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport Item from './Item';\r\nimport {GalaxyContext, SettingsContext} from '../Contexts';\r\nimport Attributes from '../Attributes';\r\nimport ExpandableList from '../ExpandableList';\r\nimport SearchResult from '../SearchResult';\r\nimport {GiInterceptorShip} from 'react-icons/all';\r\nimport SettingToggle from '../SettingToggle';\r\n\r\nexport default function Ship(props) {\r\n    let {ship} = props;\r\n    \r\n    let galaxy = useContext(GalaxyContext);\r\n    let settings = useContext(SettingsContext);\r\n    \r\n    ship = galaxy.getShip(ship);\r\n    \r\n    function detail({setSelected}) {\r\n        // let nearbyStations = galaxy._sortedSystems.flatMap(system => system.stations.filter(station => station.ships.includes(ship)));\r\n        let nearbyStations = galaxy.getNearestStations(s => s.ships.includes(ship));\r\n        if(settings.onlyDiscounts) {\r\n            nearbyStations = nearbyStations.filter(s => s.system.power === 'Li Yong-Rui');\r\n        }\r\n        return (<>\r\n            <Attributes attributes={ship.attributes}/>\r\n            {/*<h6 className=\"text-muted\">Purchase location:</h6>*/}\r\n            <SettingToggle setting=\"onlyDiscounts\" label=\"15% discount\" onToggle={() => setSelected(null)}/>\r\n            <ExpandableList items={nearbyStations} size={2} render={(station, i) => (\r\n                <SearchResult key={i} result={station}/>\r\n            )}/>\r\n        </>);\r\n    }\r\n    \r\n    return (\r\n        <Item variant=\"danger\"\r\n              handle={ship}\r\n              icon={<GiInterceptorShip/>}\r\n              sub={ship.pilot}\r\n              detail={detail}>\r\n        </Item>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport Item from './Item';\r\nimport {GalaxyContext, SettingsContext} from '../Contexts';\r\nimport ExpandableList from '../ExpandableList';\r\nimport SearchResult from '../SearchResult';\r\nimport Attributes from '../Attributes';\r\nimport Ship from './Ship';\r\nimport SettingToggle from '../SettingToggle';\r\n\r\nexport default function Module(props) {\r\n    let {module} = props;\r\n    \r\n    let galaxy = useContext(GalaxyContext);\r\n    let settings = useContext(SettingsContext);\r\n    \r\n    module = galaxy.getModule(module);\r\n    \r\n    function detail({setSelected}) {\r\n        // let nearbyStations = galaxy._sortedSystems.flatMap(system => system.stations.filter(station => station.modules.includes(module)));\r\n        let nearbyStations = galaxy.getNearestStations(s => s.modules.includes(module));\r\n        if(settings.onlyDiscounts) {\r\n            nearbyStations = nearbyStations.filter(s => s.system.power === 'Li Yong-Rui');\r\n        }\r\n        return (<>\r\n            {module.ship && (\r\n                <Ship ship={module.ship}/>\r\n            )}\r\n            <Attributes attributes={module.attributes}/>\r\n            {/*<h6 className=\"text-muted\">Purchase location:</h6>*/}\r\n            <SettingToggle setting=\"onlyDiscounts\" label=\"15% discount\" onToggle={() => setSelected(null)}/>\r\n            <ExpandableList items={nearbyStations} size={2} render={(station, i) => (\r\n                <SearchResult key={i} result={station}/>\r\n            )}/>\r\n        </>);\r\n    }\r\n    \r\n    return (\r\n        <Item variant=\"danger\"\r\n              handle={module}\r\n              name={`${module.class + module.rating} ${module.name}`}\r\n              sub={(module.ship && module.ship.name) || module.mode}\r\n              detail={detail}>\r\n        </Item>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport StarSystem from './StarSystem';\r\nimport Item from './Item';\r\nimport {BsBrightnessLow, GiAsteroid, GiVibratingBall} from 'react-icons/all';\r\nimport {GalaxyContext} from '../Contexts';\r\nimport Attributes from '../Attributes';\r\n\r\nexport default function Body(props) {\r\n    let {body} = props;\r\n    \r\n    let galaxy = useContext(GalaxyContext);\r\n    \r\n    body = galaxy.getBody(body);\r\n    if(!body) {\r\n        return <Item variant=\"secondary\" name={typeof props.body === 'string' ? props.body : '(Body)'}/>;\r\n    }\r\n    \r\n    let system = galaxy.getSystem(body.system);\r\n    \r\n    let Icon = body.type && body.type.toLowerCase().includes('star') ? BsBrightnessLow : GiVibratingBall/*IoMdPlanet*/;\r\n    \r\n    return (\r\n        <Item\r\n            variant=\"success\"\r\n            handle={body}\r\n            icon={<Icon/>}\r\n            name={body.name || '(Body)'}\r\n            sub={body.starDistance ? body.starDistance.toLocaleString() + ' Ls' : ''}\r\n            below={<small className=\"text-muted\">{body.type}</small>}\r\n            detail={() => (<>\r\n                <Attributes attributes={body.attributes}/>\r\n                {body.rings && body.rings.map((ring, i) => (\r\n                    <Item\r\n                        key={i}\r\n                        variant=\"info\"\r\n                        handle={ring}\r\n                        name={ring.name}\r\n                        icon={<GiAsteroid/>}\r\n                        sub={ring.type}/>\r\n                ))}\r\n            </>)}>\r\n            {system && (\r\n                <StarSystem system={system}/>\r\n            )}\r\n        </Item>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport Station from './item/Station';\r\nimport Module from './item/Module';\r\nimport StarSystem from './item/StarSystem';\r\nimport Ship from './item/Ship';\r\nimport Body from './item/Body';\r\n\r\nconst resultMap = {\r\n    ship(result) {\r\n        return <Ship ship={result}/>;\r\n    },\r\n    module(result) {\r\n        return <Module module={result}/>;\r\n    },\r\n    system(result) {\r\n        return <StarSystem system={result}/>;\r\n    },\r\n    station(result) {\r\n        return <Station station={result}/>;\r\n    },\r\n    body(result) {\r\n        return <Body body={result}/>;\r\n    },\r\n};\r\n\r\nexport default function SearchResult(props) {\r\n    let {result} = props;\r\n    \r\n    let renderFn = resultMap[result._type];\r\n    if(!renderFn) {\r\n        console.error('[Search result]', result._type, result);\r\n        throw new Error('Unknown search result type: ' + result._type);\r\n    }\r\n    \r\n    return renderFn(result);\r\n};\r\n","import React, {useContext} from 'react';\r\nimport {GalaxyContext} from '../Contexts';\r\nimport Item from './Item';\r\nimport ExpandableList from '../ExpandableList';\r\nimport SearchResult from '../SearchResult';\r\nimport Attributes from '../Attributes';\r\nimport {BsBrightnessLow} from 'react-icons/all';\r\n\r\nexport default function StarSystem(props) {\r\n    let {system} = props;\r\n    \r\n    let galaxy = useContext(GalaxyContext);\r\n    \r\n    system = galaxy.getSystem(system);\r\n    if(!system) {\r\n        return <Item variant=\"secondary\" name={typeof props.system === 'string' ? props.system : '(System)'}/>;\r\n    }\r\n    \r\n    return (\r\n        <Item\r\n            // variant=\"info\"\r\n            handle={system}\r\n            icon={<BsBrightnessLow/>}\r\n            sub={system._currentDistance ? system._currentDistance.toLocaleString() + ' Ly' : null}\r\n            below={\r\n                system.permitRequired && (\r\n                    <small className=\"text-danger ml-2\">Permit required</small>\r\n                )}\r\n            detail={() => (<>\r\n                <Attributes attributes={system.attributes}/>\r\n                <ExpandableList items={system.stations} size={5} render={(item, i) => (\r\n                    <SearchResult key={i} result={item}/>\r\n                )}/>\r\n                {/*<ExpandableList items={system.bodies} size={5} render={(item, i) => (*/}\r\n                {/*    <SearchResult key={i} result={item}/>*/}\r\n                {/*)}/>*/}\r\n            </>)}>\r\n        </Item>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport Item from './Item';\r\nimport {capitalCase} from 'change-case';\r\n\r\nexport default function SignalSource(props) {\r\n    let {signalSource} = props;\r\n    \r\n    // let galaxy = useContext(GalaxyContext);\r\n    \r\n    return (\r\n        <Item\r\n            variant=\"muted\"\r\n            handle={signalSource}\r\n            name={`${capitalCase(signalSource.name)} (Threat ${signalSource.threat || 0})` || '(Unknown)'}>\r\n        \r\n        </Item>\r\n    );\r\n};\r\n","import {sentenceCase} from 'change-case';\r\n\r\nconst currentSystemEvents = ['Location', 'FSDJump', 'CarrierJump'];\r\n\r\nexport class Player {\r\n    constructor() {\r\n        this.name = null;\r\n        this.journal = [];\r\n        this.discoveries = [];\r\n        // this.timestamp = null;\r\n\r\n        // this.hasExtendedJournal = false;\r\n\r\n        this._currentSystem = null;\r\n    }\r\n\r\n    getMostRecent(event) {\r\n        for(let entry of this.journal) {\r\n            if(typeof event === 'string' ? entry.event === event : event(entry)) {\r\n                return entry;\r\n            }\r\n        }\r\n    }\r\n\r\n    // getCurrentMaterials() {\r\n    //     let entry = this.getMostRecent('Materials');\r\n    //     return entry && ['Raw', 'Manufactured', 'Encoded']\r\n    //         .flatMap(type => entry[type].map(mat => [type, mat.Name, mat.Name_Localized, mat.Count]));\r\n    // }\r\n\r\n    getCurrentSystem(galaxy) {\r\n        return this._currentSystem && (galaxy.getSystem(this._currentSystem.name) || this._currentSystem);\r\n    }\r\n\r\n    update(data) {\r\n        if(data.journalEntries) {\r\n            data.journalEntries.forEach(entry => {\r\n                entry.timestamp = new Date(entry.timestamp).getTime();\r\n                let index = this.journal.findIndex(e => e.uid && e.uid === entry.uid);\r\n                if(index !== -1) {\r\n                    this.journal[index] = entry;\r\n                }\r\n                else {\r\n                    this.journal.unshift(entry);\r\n                }\r\n\r\n                if(entry.hasOwnProperty('WasDiscovered') && !entry.WasDiscovered && !entry.WasMapped) {\r\n                    index = this.discoveries.findIndex(e => e.BodyName === entry.BodyName);\r\n                    if(index !== -1) {\r\n                        let other = this.discoveries[index];\r\n                        if((entry.timestamp === other.timestamp ? entry.uid > other.uid : entry.timestamp > other.timestamp) && (entry.TerraformState || !other.TerraformState)) {\r\n                            this.discoveries[index] = entry;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.discoveries.unshift(entry);\r\n                    }\r\n                }\r\n            });\r\n            this.journal = this.journal.sort((a, b) => -(a.timestamp === b.timestamp ? a.uid - b.uid : a.timestamp - b.timestamp));\r\n\r\n            this.discoveries = this.discoveries.sort((a, b) => -(a.timestamp === b.timestamp ? a.uid - b.uid : a.timestamp - b.timestamp));//////////\r\n\r\n            // console.log(this.discoveries.filter(d=>d.TerraformState))///////\r\n\r\n            let commanderEntry = this.getMostRecent('Commander');\r\n            this.name = commanderEntry ? commanderEntry.Name : null;\r\n        }\r\n\r\n        // this.discoveries = this.journal.filter(entry => String(entry.WasDiscovered) === 'false');\r\n\r\n        this._currentSystem = null;\r\n        for(let entry of this.journal) {\r\n            if(currentSystemEvents.includes(entry.event)) {\r\n                this._currentSystem = {\r\n                    _type: 'system',\r\n                    name: entry.StarSystem || entry.SystemName,\r\n                    x: entry.StarPos[0],\r\n                    y: entry.StarPos[1],\r\n                    z: entry.StarPos[2],\r\n                    population: entry.Population,\r\n                    states: [],\r\n                    stations: [],\r\n                    bodies: [],\r\n                    attributes: {},\r\n                };\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function createBodyFromJournalEntry(entry) {\r\n    let terraformable = entry.TerraformState === 'Terraformable';\r\n    return {\r\n        _type: 'body',\r\n        id: entry.BodyID,\r\n        name: entry.Body || entry.BodyName,\r\n        type: entry.PlanetClass || (entry.StarType && `${entry.StarType + entry.Subclass}-${entry.Luminosity} star`),\r\n        system: entry.StarSystem,\r\n        rings: entry.Rings && entry.Rings.map(ring => ({\r\n            name: ring.Name.replace(entry.BodyName, '').trim(),\r\n            type: ring.RingClass\r\n                .replace('eRingClass_', '')\r\n                .replace('MetalRich', 'Metal Rich')\r\n                // eslint-disable-next-line no-useless-concat\r\n                .replace('Metal' + 'ic', 'Metallic'),\r\n        })),\r\n        starDistance: Math.round(entry.DistanceFromArrivalLS),\r\n        terraformable,\r\n        firstDiscovered: !entry.WasDiscovered && !entry.WasMapped,\r\n        attributes: {\r\n            'Type': entry.PlanetClass,\r\n            'Earth masses': entry.MassEM,\r\n            'Atmosphere': sentenceCase(entry.Atmosphere || ''),\r\n            'Volcanism': sentenceCase(entry.Volcanism || ''),\r\n            'Landable': entry.Landable && 'Landable',\r\n            'Terraformable': terraformable,\r\n            'First Discovered': entry.firstDiscovered && 'First Discovered',\r\n        },\r\n    };\r\n}\r\n\r\nexport function createShipFromJournalEntry(entry) {\r\n    return {\r\n        _type: 'ship',\r\n        name: entry.Ship_Localised,\r\n        pilot: entry.PilotName_Localised || entry.Commander,\r\n    };\r\n}\r\n\r\nexport function createSignalFromJournalEntry(entry) {\r\n    return {\r\n        _type: 'signal',\r\n        name: entry.USSType_Localised,\r\n        threat: entry.USSThreat,\r\n    };\r\n}","import React, {useContext, useState} from 'react';\r\nimport StarSystem from './StarSystem';\r\nimport {sentenceCase} from 'change-case';\r\nimport Item from './Item';\r\nimport Body from './Body';\r\nimport Ship from './Ship';\r\nimport SignalSource from './SignalSource';\r\nimport Station from './Station';\r\nimport {\r\n    createBodyFromJournalEntry,\r\n    createShipFromJournalEntry,\r\n    createSignalFromJournalEntry,\r\n} from '../../services/player-service';\r\nimport {GalaxyContext} from '../Contexts';\r\n\r\nexport default function JournalEntry(props) {\r\n    let {entry, internal} = props;\r\n\r\n    let [item, setItem] = useState(null);\r\n\r\n    function cached(obj) {\r\n        if(!item) {\r\n            setItem(obj);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    let galaxy = useContext(GalaxyContext);\r\n\r\n    let name = sentenceCase(entry.event, {})\r\n        .replace('Uss', 'USS')\r\n        .replace('Fss', 'FSS')\r\n        .replace('Dss', 'DSS');\r\n\r\n    entry.StarSystem = entry.StarSystem || entry.SystemName;\r\n\r\n    let time = new Date(entry.timestamp);\r\n\r\n    let internalComponent = (<>\r\n        {entry.StarSystem && (\r\n            entry.StationName ? (\r\n                <Station station={[entry.StarSystem, entry.StationName]}/>\r\n            ) : entry.Body || entry.BodyName ? (\r\n                <Body body={cached(item || galaxy.getBody(entry.BodyName) || createBodyFromJournalEntry(entry))}/>\r\n            ) : (\r\n                <StarSystem system={entry.StarSystem}/>\r\n            )\r\n        )}\r\n        {entry.Ship_Localised && (\r\n            <Ship ship={cached(item || createShipFromJournalEntry(entry))}/>\r\n        )}\r\n        {entry.USSType_Localised && (\r\n            <SignalSource signalSource={cached(item || createSignalFromJournalEntry(entry))}/>\r\n        )}\r\n    </>);\r\n\r\n    if(internal) {\r\n        return internalComponent;\r\n    }\r\n\r\n    return (\r\n        <Item variant=\"muted\"\r\n              handle={entry}\r\n              name={name}\r\n              below={(<>\r\n                  {entry.From_Localised && (\r\n                      <small className=\"text-secondary d-block\">{entry.From_Localised}:</small>\r\n                  )}\r\n                  {entry.Message_Localised && (\r\n                      <small className=\"text-muted d-block\">{entry.Message_Localised}</small>\r\n                  )}\r\n              </>)}\r\n              sub={time.getUTCHours().toString().padStart(2, '0') + ':' + time.getUTCMinutes().toString().padStart(2, '0')}>\r\n            {internalComponent}\r\n        </Item>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport Item from './Item';\r\nimport {IoMdArrowDropdown} from 'react-icons/all';\r\n\r\nexport default function Category(props) {\r\n    const {name, detail, children} = props;\r\n    \r\n    return (\r\n        <Item name={name} icon={<IoMdArrowDropdown/>} detail={detail}>\r\n            {children}\r\n        </Item>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport {GalaxyContext} from './Contexts';\r\nimport classNames from 'classnames';\r\n\r\nexport default function Body(props) {\r\n    let {body, player} = props;\r\n\r\n    let galaxy = useContext(GalaxyContext);\r\n\r\n    body = galaxy.getBody(body);\r\n    // if(!body) {\r\n    //     return <Item variant=\"secondary\" name={typeof props.body === 'string' ? props.body : '(Body)'}/>;\r\n    // }\r\n\r\n    // let system = galaxy.getSystem(body.system);\r\n    //\r\n    // let Icon = body.type && body.type.toLowerCase().includes('star') ? BsBrightnessLow : GiVibratingBall/*IoMdPlanet*/;\r\n\r\n    let systemName = typeof body.system === 'string' ? body.system : (galaxy.getSystem(body.system) || {}).name;\r\n\r\n    let playerMapped = player && player.getMostRecent(entry => entry.event === 'SAAScanComplete' && entry.BodyName === body.name);\r\n\r\n    return (\r\n        // <Item\r\n        //     variant=\"success\"\r\n        //     handle={body}\r\n        //     icon={<Icon/>}\r\n        //     name={body.name || '(Body)'}\r\n        //     sub={body.starDistance ? body.starDistance.toLocaleString() + ' Ls' : ''}\r\n        //     below={<small className=\"text-muted\">{body.type}</small>}\r\n        //     detail={() => (<>\r\n        //         <Attributes attributes={body.attributes}/>\r\n        //         {body.rings && body.rings.map((ring, i) => (\r\n        //             <Item\r\n        //                 key={i}\r\n        //                 variant=\"info\"\r\n        //                 handle={ring}\r\n        //                 name={ring.name}\r\n        //                 icon={<GiAsteroid/>}\r\n        //                 sub={ring.type}/>\r\n        //         ))}\r\n        //     </>)}>\r\n        //     {system && (\r\n        //         <StarSystem system={system}/>\r\n        //     )}\r\n        // </Item>\r\n        <div className={classNames('d-flex py-2', playerMapped && 'text-success')}\r\n             style={{background: 'black', opacity: playerMapped && .6}}>\r\n            <div className=\"px-3\" style={{minWidth: '60px'}}>\r\n                <h4 className=\"mb-0\">{body.name.replace(systemName, '').trim()}</h4>\r\n            </div>\r\n            <div>\r\n                <div style={{marginTop: '4px'}}>{body.type}</div>\r\n                {/*<Attributes attributes={body.attributes}/>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport './App.scss';\r\n\r\n\r\nexport default function LoadingMain(props) {\r\n    let {text} = props;\r\n\r\n    return (\r\n        <div style={{marginTop: '20vh'}}>\r\n            <div style={{maxWidth: '960px', animationDuration: '1s'}}>\r\n                <h4 className=\"text-center text-light mb-5 animate-fade-in\" style={{animationDuration: '1s'}}>\r\n                    {text}\r\n                </h4>\r\n                <img className=\"d-block mx-auto animate-fade-in\" style={{animationDuration: '4s'}}\r\n                     src=\"img/favicon.png\" alt=\"Loading...\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\n\r\nimport './App.scss';\r\nimport {Button, InputGroup, Tab, Tabs} from 'react-bootstrap';\r\nimport {sentenceCase} from 'change-case';\r\nimport {tryConnect} from '../services/connection-service';\r\nimport {FilterContext, GalaxyContext, SearchContext, SelectContext, SettingsContext} from './Contexts';\r\nimport {findGalaxy, getDefaultGalaxy} from '../services/galaxy-service';\r\nimport JournalEntry from './item/JournalEntry';\r\nimport {createBodyFromJournalEntry, Player} from '../services/player-service';\r\nimport {FiMapPin, FiRadio, FiSearch} from 'react-icons/all';\r\nimport SearchResult from './SearchResult';\r\nimport ExpandableList from './ExpandableList';\r\nimport StarSystem from './item/StarSystem';\r\nimport Body from './item/Body';\r\nimport Category from './item/Category';\r\nimport Station from './item/Station';\r\nimport queryString from 'query-string';\r\nimport BodyCompact from './BodyCompact';\r\nimport SettingToggle from './SettingToggle';\r\nimport LoadingMain from './LoadingMain';\r\n\r\nlet connectionListener = null;\r\n\r\nlet allowAutoConnect = true;\r\n\r\nexport default function App() {\r\n    let [settings, setSettings] = useState(null);\r\n    let [player, setPlayer] = useState(null);\r\n    let [galaxy, setGalaxy] = useState(null);\r\n    let [connection, setConnection] = useState(null);\r\n    let [reconnecting, setReconnecting] = useState(null);\r\n    let [customSystemName, setCustomSystemName] = useState('');\r\n    let [currentTab, setCurrentTab] = useState(undefined);\r\n    let [searchQuery, setSearchQuery] = useState('');\r\n    let [searchResults, setSearchResults] = useState([]);\r\n    let [favorites, setFavorites] = useState([]);\r\n    let [selected, setSelected] = useState(null);\r\n\r\n    let {layout} = queryString.parse(window.location.search);\r\n\r\n    if(!settings) {\r\n        settings = {\r\n            set(changes) {\r\n                setSettings({...settings, ...changes});\r\n            },\r\n        };\r\n        setSettings(settings);\r\n    }\r\n\r\n    if(!player) {\r\n        player = new Player();\r\n        setPlayer(player);\r\n    }\r\n\r\n    function sendMessage(msg, role) {\r\n        console.log('Sending message:', msg);\r\n        connection.emit('msg', msg, role);\r\n    }\r\n\r\n    function transmitSettings(settings) {\r\n        // if(settings.hasOwnProperty('overlay')) {\r\n        sendMessage({\r\n            overlay: settings.overlay,\r\n        }, 'uplink');\r\n        // }\r\n    }\r\n\r\n    function promptConnect() {\r\n        disconnect();\r\n        // bootbox.prompt({\r\n        //     title: 'Connect to IP address:',\r\n        //     value: connection ? connection.io.uri.replace('ws://', '') : localStorage['websocket'] || 'localhost',\r\n        //     callback: address => {\r\n        //         if(address) {\r\n        //             localStorage['websocket'] = address || '';\r\n        //             connect(address)\r\n        //                 .catch(err => console.error(err));\r\n        //         }\r\n        //     },\r\n        // });\r\n        connect()\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    async function connect(roomName) {\r\n        setReconnecting(true);\r\n        connection = await tryConnect(roomName);\r\n        setConnection(connection);\r\n        transmitSettings(settings);//////////\r\n        setReconnecting(false);\r\n        // setCurrentTab('nearby');\r\n        return connection;\r\n    }\r\n\r\n    function disconnect() {\r\n        if(connection) {\r\n            connection.close();\r\n        }\r\n        // localStorage['websocket'] = '';\r\n        setConnection(null);\r\n        setReconnecting(false);\r\n        setPlayer(null);\r\n    }\r\n\r\n    // console.log(relativeSystem || '-', galaxy, player);///\r\n\r\n    if(connection) {\r\n        if(connectionListener) {\r\n            connection.removeListener('msg', connectionListener);\r\n        }\r\n        connectionListener = (msg, id, role) => {\r\n            if(role === 'uplink') {\r\n                player.update(msg);\r\n            }\r\n            setPlayer(null);\r\n            if(!msg.resetPlayer) {\r\n                setPlayer(player);\r\n            }\r\n        };\r\n        connection.on('msg', connectionListener);\r\n    }\r\n    // useEffect(() => {\r\n    //     if(connection) {\r\n    //         return () => connection.removeListener('message', listener);\r\n    //     }\r\n    // });\r\n\r\n    if(/*storedAddress && */allowAutoConnect) {\r\n        allowAutoConnect = false;\r\n        // let timeout = setTimeout(() => disconnect(), 1000);\r\n        connect()\r\n            //     .then(() => clearTimeout(timeout))\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    if(!galaxy) {\r\n        if(layout === 'overlay') {\r\n            galaxy = getDefaultGalaxy();\r\n            // setGalaxy(galaxy);\r\n        }\r\n        else {\r\n            findGalaxy().then(galaxy => setGalaxy(galaxy));\r\n            return (\r\n                <LoadingMain text=\"Loading galaxy data...\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    let playerSystem = player.getCurrentSystem(galaxy);\r\n    let relativeSystem = galaxy.setRelativeSystem(galaxy.getSystem(parseInt(customSystemName) ? null : customSystemName) || playerSystem || 'Sol');\r\n\r\n    if(layout === 'overlay' && !relativeSystem) {\r\n        return (\r\n            <LoadingMain text=\"Loading player data...\"/>\r\n        );\r\n    }\r\n\r\n    if(!currentTab) {\r\n        currentTab = playerSystem ? 'nearby' : 'settings';\r\n        setCurrentTab(currentTab);\r\n    }\r\n\r\n    let hideEvents = ['Music', 'FSSSignalDiscovered'];\r\n\r\n    function isEntryVisible(entry) {\r\n        return !hideEvents.includes(entry.event);\r\n    }\r\n\r\n    function doSearch(searchText) {\r\n        // setCurrentTab(searchText ? 'search' : undefined);\r\n        if(searchText) {\r\n            setCurrentTab('search');\r\n        }\r\n        else {\r\n            searchText = '';\r\n        }\r\n        setSearchQuery(searchText);\r\n        setSearchResults(galaxy.search(searchText));\r\n        setSelected(null);\r\n    }\r\n\r\n    function doFilter(item) {\r\n        // return item._type !== 'station' || item.type !== 'Fleet Carrier';\r\n        return true;\r\n    }\r\n\r\n    let searchBarElem = null;\r\n\r\n    function onSelectTab(tab) {\r\n        setCurrentTab(tab);\r\n        setSelected(null);\r\n        if(tab === 'search' && searchBarElem) {\r\n            if(currentTab === 'search' && searchBarElem.value) {\r\n                searchBarElem.value = '';\r\n                // setSearchQuery('');\r\n                // setSearchResults([]);\r\n                doSearch();\r\n            }\r\n            else {\r\n                searchBarElem.select();\r\n            }\r\n            searchBarElem.focus();\r\n        }\r\n    }\r\n\r\n    function isSearchRelevant(text) {\r\n        return galaxy._isSearchRelevant(searchQuery, text);\r\n    }\r\n\r\n    function addFavorite(item) {\r\n        if(!item._type) {\r\n            return;/////\r\n        }\r\n        setFavorites([item, ...favorites.filter(x => x !== item)]);\r\n    }\r\n\r\n    function removeFavorite(item) {\r\n        setFavorites(favorites.filter(x => x !== item));\r\n    }\r\n\r\n    if(layout === 'overlay') {\r\n        document.body.style.backgroundColor = '#0000';\r\n    }\r\n\r\n    let overlayContent = () => (<>\r\n        <SearchContext.Provider\r\n            value={{isRelevant: v => v === 'Terraformable'}}>\r\n            <ExpandableList\r\n                items={(() => {\r\n                    let items = player.journal.filter(entry => (entry.TerraformState || entry.PlanetClass === 'Earthlike body' || entry.PlanetClass === 'Ammonia world') && entry.StarSystem === relativeSystem.name).sort((a, b) => a.BodyName.localeCompare(b.BodyName));\r\n                    return items.filter((a, i) => items.slice(i + 1).every(b => a.BodyName !== b.BodyName));\r\n                })()}\r\n                size={10}\r\n                render={(entry, i) => (\r\n                    // <JournalEntry\r\n                    //     key={`${entry.timestamp}${i}`}\r\n                    //     internal\r\n                    //     entry={entry}/>\r\n                    <BodyCompact key={i} body={createBodyFromJournalEntry(entry)} player={player}/>\r\n                )}/>\r\n        </SearchContext.Provider>\r\n    </>);\r\n\r\n    let mainContent = () => (<>\r\n        <InputGroup size=\"lg\" className=\"mb-2\">\r\n            <input type=\"text\"\r\n                   className=\"form-control\"\r\n                   value={searchQuery}\r\n                   placeholder={'Search...'}\r\n                   ref={elem => searchBarElem = elem}\r\n                // onFocus={() => setCurrentTab('search')}\r\n                   onChange={e => doSearch(e.target.value)}/>\r\n        </InputGroup>\r\n        <Tabs activeKey={currentTab}\r\n              onSelect={onSelectTab}>\r\n            <Tab eventKey=\"search\" title={<FiSearch className=\"h4 mt-1\"/>}>\r\n                {currentTab === 'search' && (\r\n                    searchQuery ? (\r\n                        <ExpandableList\r\n                            items={searchResults}\r\n                            size={20}\r\n                            // ignoreSort\r\n                            render={(result, i) => (\r\n                                <SearchResult key={i} result={result}/>\r\n                            )}/>\r\n                    ) : (<>\r\n                        <ExpandableList\r\n                            items={favorites}\r\n                            size={10}\r\n                            // ignoreSort\r\n                            render={(item, i) => (\r\n                                <SearchResult key={i} result={item}/>\r\n                            )}/>\r\n                        <ExpandableList\r\n                            items={galaxy.getNearestSystems(() => s => !favorites.includes(s), 80)}\r\n                            size={10}\r\n                            // ignoreSort\r\n                            render={(item, i) => (\r\n                                <SearchResult key={i} result={item}/>\r\n                            )}/>\r\n                    </>)\r\n                )}\r\n            </Tab>\r\n            <Tab eventKey=\"nearby\" title={<FiMapPin className=\"h4 mt-1\"/>}>\r\n                {currentTab === 'nearby' && (<>\r\n                    <div className=\"mt-2\">\r\n                        <Category name=\"Nearby stations\" detail={() => (\r\n                            <ExpandableList\r\n                                items={galaxy.getNearestStations()}\r\n                                size={3}\r\n                                // ignoreSort\r\n                                render={(station, i) => (\r\n                                    <SearchResult key={i} result={station}/>\r\n                                )}/>\r\n                        )}/>\r\n                        <Category name=\"Pristine rings\" detail={() => (<>\r\n                            {/*<SettingToggle*/}\r\n                            {/*    setting=\"allResourceTypes\"*/}\r\n                            {/*    inverted*/}\r\n                            {/*    label=\"Pristine\"/>*/}\r\n                            {galaxy.ringTypes.map((type, i) => (\r\n                                <Category key={i} name={type} detail={() => (<>\r\n                                    <ExpandableList\r\n                                        items={galaxy.getNearestRingBodies(type).filter(b => settings.allResourceTypes || b.system.reserveType === 'Pristine')}\r\n                                        size={2}\r\n                                        // ignoreSort\r\n                                        render={(body, i) => (\r\n                                            <Body key={i} body={body}/>\r\n                                        )}/>\r\n                                </>)}/>\r\n                            ))}\r\n                        </>)}/>\r\n                        {/*<Category name=\"Material traders\" detail={() => (*/}\r\n                        {/*    galaxy.materialTypes.map((type, i) => (*/}\r\n                        {/*        <Category key={i} name={type} detail={() => (*/}\r\n                        {/*            <ExpandableList*/}\r\n                        {/*                items={galaxy.getNearestStations(s => s.services.includes(type + ' Material Trader'))}*/}\r\n                        {/*                size={2}*/}\r\n                        {/*                // ignoreSort*/}\r\n                        {/*                render={(station, i) => (*/}\r\n                        {/*                    <Station key={i} station={station}/>*/}\r\n                        {/*                )}/>*/}\r\n                        {/*        )}/>*/}\r\n                        {/*    ))*/}\r\n                        {/*)}/>*/}\r\n                        <Category name=\"Services\" detail={() => (\r\n                            ['Interstellar Factors', 'Black Market', 'Technology Broker'].map((type, i) => (\r\n                                <Category key={i} name={sentenceCase(type)} detail={() => (\r\n                                    <ExpandableList\r\n                                        items={galaxy.getNearestStations(s => s.services.includes(type))}\r\n                                        size={2}\r\n                                        // ignoreSort\r\n                                        render={(station, i) => (\r\n                                            <Station key={i} station={station}/>\r\n                                        )}/>\r\n                                )}/>\r\n                            ))\r\n                        )}/>\r\n                        <br/>\r\n                        {overlayContent()}\r\n                    </div>\r\n                </>)}\r\n            </Tab>\r\n            <Tab eventKey=\"settings\" title={<FiRadio className=\"h4 mt-1\"/>}>\r\n                {currentTab === 'settings' && (<>\r\n                    <div className=\"p-2\">\r\n                        <div className=\"p-2\">\r\n                            <h5 className={'text-' + (customSystemName ? relativeSystem.name.toLowerCase() === customSystemName.toLowerCase() ? 'success' : 'danger' : 'light')}>\r\n                                Current system:\r\n                            </h5>\r\n                            <InputGroup size=\"md\" className=\"my-1\" style={{opacity: .8}}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    value={customSystemName}\r\n                                    placeholder=\"Choose populated system...\"\r\n                                    onFocus={e => e.target.select()}\r\n                                    onChange={e => doSearch(null) & setCustomSystemName(e.target.value)}/>\r\n                            </InputGroup>\r\n                            <StarSystem system={relativeSystem}/>\r\n                        </div>\r\n                        {!connection ? (\r\n                            <Button\r\n                                size=\"lg\"\r\n                                variant={'outline-' + (connection ? 'light' : reconnecting ? 'warning' : 'info')}\r\n                                className=\"w-100 py-2 my-3\"\r\n                                style={{opacity: connection && .5}}\r\n                                onClick={() => connection ? disconnect() : promptConnect()}>\r\n                                {/*{connection ? 'Connected' : reconnecting ? 'Connecting...' : 'Connect'}*/}\r\n                                {reconnecting ? 'Connecting...' : 'Connect'}\r\n                            </Button>\r\n                        ) : playerSystem && (<div className=\"ml-2 mt-3\">\r\n                            {/*<h5 className=\"text-light my-3\">*/}\r\n                            {/*    Connected to local network*/}\r\n                            {/*</h5>*/}\r\n                            <SettingToggle\r\n                                setting=\"overlay\"\r\n                                label=\"Exploration overlay\"\r\n                                onToggle={overlay => transmitSettings({...settings, overlay})}/>\r\n                        </div>)}\r\n                        {!playerSystem ? (\r\n                            <a href=\"https://github.com/rvanasa/elite-navigator/releases/latest\"\r\n                               target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <Button\r\n                                    variant=\"outline-light\"\r\n                                    className=\"w-100 py-2 my-2\"\r\n                                    style={{opacity: .7}}\r\n                                    onClick={() => connect('localhost')}>\r\n                                    Download location sync\r\n                                </Button>\r\n                            </a>\r\n                        ) : (<>\r\n                            <br/>\r\n                            <Category name=\"Recent actions\" detail={() => (\r\n                                <ExpandableList\r\n                                    items={player.journal.filter(isEntryVisible)}\r\n                                    size={5}\r\n                                    render={(entry, i) => (\r\n                                        <JournalEntry\r\n                                            key={`${entry.timestamp}${i}`}\r\n                                            entry={entry}/>\r\n                                    )}/>\r\n                            )}/>\r\n                            {/*<Category name=\"First discoveries\" detail={() => (<>*/}\r\n                            {/*    <Category name=\"Everything\" detail={() => (*/}\r\n                            {/*        <ExpandableList*/}\r\n                            {/*            items={player.discoveries}*/}\r\n                            {/*            size={10}*/}\r\n                            {/*            render={(entry, i) => (*/}\r\n                            {/*                <JournalEntry*/}\r\n                            {/*                    key={`${entry.timestamp}${i}`}*/}\r\n                            {/*                    internal*/}\r\n                            {/*                    entry={entry}/>*/}\r\n                            {/*            )}/>*/}\r\n                            {/*    )}/>*/}\r\n                            {/*    <Category name=\"Terraformable\" detail={() => (*/}\r\n                            {/*        <ExpandableList*/}\r\n                            {/*            items={player.discoveries.filter(entry => entry.TerraformState)}*/}\r\n                            {/*            size={10}*/}\r\n                            {/*            render={(entry, i) => (*/}\r\n                            {/*                <JournalEntry*/}\r\n                            {/*                    key={`${entry.timestamp}${i}`}*/}\r\n                            {/*                    internal*/}\r\n                            {/*                    entry={entry}/>*/}\r\n                            {/*            )}/>*/}\r\n                            {/*    )}/>*/}\r\n                            {/*    <Category name=\"Earthlike\" detail={() => (*/}\r\n                            {/*        <ExpandableList*/}\r\n                            {/*            items={player.discoveries.filter(entry => entry.PlanetClass === 'Earthlike body')}*/}\r\n                            {/*            size={10}*/}\r\n                            {/*            render={(entry, i) => (*/}\r\n                            {/*                <JournalEntry*/}\r\n                            {/*                    key={`${entry.timestamp}${i}`}*/}\r\n                            {/*                    internal*/}\r\n                            {/*                    entry={entry}/>*/}\r\n                            {/*            )}/>*/}\r\n                            {/*    )}/>*/}\r\n                            {/*</>)}/>*/}\r\n                        </>)}\r\n                    </div>\r\n                </>)}\r\n            </Tab>\r\n        </Tabs>\r\n    </>);\r\n\r\n    return (\r\n        <SettingsContext.Provider value={settings}>\r\n            <SelectContext.Provider value={{selected, setSelected, ancestors: []}}>\r\n                <FilterContext.Provider value={{filter: doFilter, favorites, addFavorite, removeFavorite}}>\r\n                    <GalaxyContext.Provider value={galaxy}>\r\n                        <SearchContext.Provider value={{text: searchQuery, isRelevant: isSearchRelevant}}>\r\n                            <div className=\"p-2\">\r\n                                <div>\r\n                                    {player.name && layout !== 'overlay' && (\r\n                                        <h6 className=\"text-primary float-right mt-1\">CMDR {player.name}</h6>\r\n                                    )}\r\n                                    <h5 className={'text-' + (relativeSystem.name.toLowerCase() === customSystemName.toLowerCase() ? 'success' :\r\n                                        playerSystem ? playerSystem && relativeSystem.name.toLowerCase() !== playerSystem.name.toLowerCase() ? 'danger' : 'info' : 'light')}>\r\n                                        {layout !== 'overlay' || playerSystem || customSystemName || searchQuery ? relativeSystem.name : <>&nbsp;</>}\r\n                                    </h5>\r\n                                </div>\r\n                                {layout === 'overlay' ? overlayContent() : mainContent()}\r\n                            </div>\r\n                        </SearchContext.Provider>\r\n                    </GalaxyContext.Provider>\r\n                </FilterContext.Provider>\r\n            </SelectContext.Provider>\r\n        </SettingsContext.Provider>\r\n    );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the src load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web src is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different src. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap';\r\nimport './style/index.scss';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your src to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}