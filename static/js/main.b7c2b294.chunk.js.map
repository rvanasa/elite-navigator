{"version":3,"sources":["services/connection-service.js","components/Contexts.js","services/galaxy-service.js","components/Attributes.js","components/item/Item.js","components/ExpandableList.js","components/item/Station.js","components/SettingToggle.js","components/item/Ship.js","components/item/Module.js","components/item/Body.js","components/SearchResult.js","components/item/StarSystem.js","components/item/SignalSource.js","components/item/JournalEntry.js","services/player-service.js","components/item/Category.js","components/App.js","serviceWorker.js","index.js"],"names":["relayAddress","currentConnection","pendingPromise","tryConnect","roomName","a","close","Promise","resolve","reject","events","EventEmitter","socket","io","connect","sources","Set","on","console","log","emit","document","addEventListener","visibilityListener","visibilityState","connected","removeEventListener","id","has","delete","resetPlayer","msg","add","err","error","GalaxyContext","React","createContext","SelectContext","SearchContext","FilterContext","SettingsContext","cache","setupCache","maxAge","api","axios","create","adapter","Galaxy","data","this","ships","modules","systems","stations","bodies","assert","Object","keys","every","k","hasOwnProperty","materialTypes","ringTypes","searchOptions","_relativeSystem","_sortedSystems","_sortedStations","_sortedBodies","text","toString","toLowerCase","replace","split","map","s","trim","filter","sort","type","option","_type","_searchTerms","name","values","attributes","v","flatMap","_getSearchTerms","push","dict","key","ship","_resolve","module","system","station","Array","isArray","getSystem","body","b","dx","x","dy","y","dz","z","Math","round","sqrt","forEach","updateDistance","d","_distanceModifier","_currentDistance","_children","c","getDistanceBetweenSystems","filterFn","count","results","arguments","length","Number","POSITIVE_INFINITY","slice","rings","ring","query","queryTerms","textTerms","some","q","t","startsWith","matches","opt","terms","minTermLen","opts","optsLen","termsLen","i","hasAllTerms","j","term","termLen","optTerms","optTermsLen","foundTerm","optTerm","substring","includes","getShipAttributes","getModuleAttributes","groupName","class","rating","category","mode","getSystemAttributes","allegiance","power","powerState","states","join","reserveType","population","getStationAttributes","Type","economies","services","prepareData","items","item","ref","value","entries","$resolve","loadGalaxy","get","galaxy","defineProperty","_registerSearch","starDistance","currentGalaxyPromise","Attributes","props","hideKeys","className","toLocaleString","Item","handle","variant","icon","sub","below","detail","children","useState","isSelected","setSelected","detailSelected","setDetailSelected","filterContext","useContext","selectContext","searchContext","ancestors","selected","relevantAttributes","isRelevant","isFavorite","favorites","borderStyle","style","background","borderLeft","borderTop","borderRight","borderBottom","onSwipedLeft","removeFavorite","onSwipedRight","addFavorite","opacity","onClick","e","stopPropagation","position","top","marginTop","whiteSpace","subSelectContext","Provider","renderDetail","ExpandableList","size","ignoreFilter","ignoreSort","render","maxItems","setMaxItems","Station","getStation","Icon","planetary","GiPlanetCore","GiDefenseSatellite","StarSystem","SettingToggle","setting","label","inverted","onToggle","settings","Form","Group","set","Check","readOnly","checked","Ship","getShip","pilot","nearbyStations","getNearestStations","onlyDiscounts","SearchResult","result","Module","getModule","Body","getBody","BsBrightnessLow","GiVibratingBall","resultMap","renderFn","Error","permitRequired","SignalSource","signalSource","capitalCase","threat","JournalEntry","entry","internal","setItem","cached","obj","sentenceCase","event","SystemName","time","Date","timestamp","internalComponent","StationName","BodyName","BodyID","PlanetClass","StarType","Subclass","Luminosity","MassEM","Atmosphere","Volcanism","Landable","TerraformState","wasDiscovered","Ship_Localised","PilotName_Localised","Commander","USSType_Localised","USSThreat","From_Localised","Message_Localised","getUTCHours","padStart","getUTCMinutes","currentSystemEvents","Player","journal","discoveries","_currentSystem","journalEntries","getTime","index","findIndex","uid","unshift","WasDiscovered","WasMapped","other","commanderEntry","getLatest","Name","StarPos","Population","Category","connectionListener","allowAutoConnect","App","setSettings","player","setPlayer","setGalaxy","connection","setConnection","reconnecting","setReconnecting","customSystemName","setCustomSystemName","undefined","currentTab","setCurrentTab","searchQuery","setSearchQuery","searchResults","setSearchResults","setFavorites","disconnect","changes","removeListener","update","timeout","setTimeout","then","clearTimeout","catch","findGalaxy","maxWidth","animationDuration","src","alt","playerSystem","getCurrentSystem","relativeSystem","setRelativeSystem","parseInt","hideEvents","isEntryVisible","doSearch","searchText","search","searchBarElem","_isSearchRelevant","InputGroup","placeholder","elem","onChange","target","Tabs","activeKey","onSelect","tab","select","focus","Tab","eventKey","title","getNearestSystems","getNearestRingBodies","allResourceTypes","localeCompare","onFocus","Button","href","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b7c2b294.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\nimport {EventEmitter} from 'events';\r\n\r\nconst relayAddress = 'https://elite-navigator.herokuapp.com';\r\n\r\nlet currentConnection = null;\r\nlet pendingPromise = null;\r\n\r\n// export function getCurrentConnection() {\r\n//     return currentConnection;\r\n// }\r\n\r\nexport async function tryConnect(roomName) {\r\n    roomName = roomName || 'elite-navigator';///\r\n\r\n    if(currentConnection) {\r\n        currentConnection.close();\r\n    }\r\n\r\n    currentConnection = null;\r\n    pendingPromise = new Promise((resolve, reject) => {\r\n\r\n        let events = new EventEmitter();\r\n\r\n        let socket = io.connect(relayAddress);\r\n        currentConnection = socket;\r\n\r\n        let sources = new Set();\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Connected');\r\n\r\n            socket.emit('join', roomName);////////////////////////////////////////////////////\r\n\r\n            let visibilityListener = () => {\r\n                if(socket !== currentConnection) {\r\n                    document.removeEventListener('visibilitychange', visibilityListener);\r\n                    return;\r\n                }\r\n                if(document.visibilityState === 'visible' && !socket.connected) {\r\n                    socket.connect();\r\n                }\r\n            };\r\n            document.addEventListener('visibilitychange', visibilityListener);\r\n\r\n            // pendingAddress = pendingPromise = null;\r\n            resolve(events);\r\n        });\r\n\r\n        socket.on('join', id => {\r\n            console.log('Joined:', id);\r\n        });\r\n\r\n        socket.on('leave', id => {\r\n            console.log('Left:', id);\r\n\r\n            if(sources.has(id)) {\r\n                sources.delete(id);\r\n\r\n                events.emit('data', {resetPlayer: true});\r\n            }\r\n        });\r\n\r\n        socket.on('msg', (msg, id) => {\r\n            console.log('>', id, msg);\r\n\r\n            sources.add(id);\r\n\r\n            events.emit('data', {msg});\r\n        });\r\n\r\n        socket.on('error', err => {\r\n            console.error(err);\r\n\r\n            // pendingAddress = pendingPromise = null;\r\n            reject(err);\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            console.log('Disconnected');\r\n\r\n            events.emit('data', {resetPlayer: true});\r\n        });\r\n    });\r\n    return pendingPromise;\r\n}","import React from 'react';\r\n\r\nexport const GalaxyContext = React.createContext(null);\r\n\r\nexport const SelectContext = React.createContext(null);\r\n\r\nexport const SearchContext = React.createContext(null);\r\n\r\nexport const FilterContext = React.createContext(null);\r\n\r\nexport const SettingsContext = React.createContext(null);\r\n","import axios from 'axios';\r\nimport {setupCache} from 'axios-cache-adapter';\r\n\r\nconst cache = setupCache({\r\n    maxAge: 1000 * 60 * 4,\r\n});\r\n\r\nconst api = axios.create({\r\n    adapter: cache.adapter,\r\n});\r\n\r\nconst starDistanceFactor = 1e-4;\r\n\r\nclass Galaxy {\r\n    constructor(data) {\r\n        this.ships = data.ships;\r\n        this.modules = data.modules;\r\n        this.systems = data.systems;\r\n        this.stations = data.stations;\r\n        this.bodies = data.bodies;\r\n        \r\n        console.assert(Object.keys(data).every(k => this.hasOwnProperty(k)));\r\n        \r\n        this.materialTypes = ['Raw', 'Manufactured', 'Encoded'];\r\n        this.ringTypes = ['Rocky', 'Icy', 'Metallic', 'Metal Rich'];\r\n        \r\n        this.searchOptions = [];\r\n        \r\n        this._relativeSystem = null;\r\n        this._sortedSystems = [];\r\n        this._sortedStations = [];\r\n        this._sortedBodies = [];\r\n    }\r\n    \r\n    _getSearchTerms(text) {\r\n        if(!text) {\r\n            return [];\r\n        }\r\n        return [...new Set(text.toString().toLowerCase().replace(/[^a-z0-9 ]/, ' ').split(' ').map(s => s.trim()).filter(s => !!s))].sort();\r\n    }\r\n    \r\n    _registerSearch(type, option) {\r\n        option._type = type;\r\n        option._searchTerms = [\r\n            ...new Set([option.name, ...Object.values(option.attributes).filter(v => typeof v === 'string')]\r\n                .filter(s => !!s)\r\n                .flatMap(s => this._getSearchTerms(s))\r\n                .map(s => s.trim())\r\n                .filter(s => s))\r\n        ].sort();\r\n        this.searchOptions.push(option);\r\n        return option;\r\n    }\r\n    \r\n    _resolve(dict, key) {\r\n        return (typeof key === 'string' ? dict[key.toLowerCase()] : typeof key === 'number' ? dict[key] : key) || null;\r\n    }\r\n    \r\n    getShip(ship) {\r\n        return this._resolve(this.ships, ship);\r\n    }\r\n    \r\n    getModule(module) {\r\n        return this._resolve(this.modules, module);\r\n    }\r\n    \r\n    getSystem(system) {\r\n        return this._resolve(this.systems, system);\r\n    }\r\n    \r\n    getStation(station) {\r\n        if(Array.isArray(station)) {\r\n            let system = this.getSystem(station[0]);\r\n            return (system && system.stations[station[1]]) || null;\r\n        }\r\n        return this._resolve(this.stations, station);\r\n    }\r\n    \r\n    getBody(body) {\r\n        return this._resolve(this.bodies, body);\r\n    }\r\n    \r\n    getDistanceBetweenSystems(a, b) {\r\n        let [dx, dy, dz] = [a.x - b.x, a.y - b.y, a.z - b.z];\r\n        return Math.round(Math.sqrt(dx ** 2 + dy ** 2 + dz ** 2));\r\n    }\r\n    \r\n    getRelativeSystem() {\r\n        return this._relativeSystem;\r\n    }\r\n    \r\n    setRelativeSystem(system) {\r\n        system = this.getSystem(system);\r\n        if(this._relativeSystem === system) {\r\n            return system;\r\n        }\r\n        this._relativeSystem = system;\r\n        let updateDistance = (d, s) => {\r\n            d *= 1 + (s._distanceModifier || 0);\r\n            // if(s.name === 'Sol') {\r\n            //     console.log(d, s._currentDistance, s._distanceModifier || 0);///////////////////////\r\n            // }\r\n            s._currentDistance = d;\r\n            if(s._children) {\r\n                s._children.forEach(c => updateDistance(d, c));\r\n            }\r\n        };\r\n        this._sortedSystems.forEach(s => updateDistance(system ? this.getDistanceBetweenSystems(system, s) : 0, s));\r\n        this._sortedSystems.sort((a, b) => system ? a._currentDistance - b._currentDistance : a.name - b.name);\r\n        \r\n        this._sortedStations.sort((a, b) => system ? a._currentDistance - b._currentDistance : a.name - b.name);\r\n        \r\n        this._sortedBodies.sort((a, b) => system ? a._currentDistance - b._currentDistance : a.name - b.name);\r\n        return system;\r\n    }\r\n    \r\n    getNearestSystems(filterFn, count) {\r\n        let results = [];\r\n        if(arguments.length < 2) {\r\n            count = Number.POSITIVE_INFINITY;\r\n        }\r\n        else if(count <= 0) {\r\n            return results;\r\n        }\r\n        if(!filterFn) {\r\n            return this._sortedSystems.slice(0, count);\r\n        }\r\n        for(let system of this._sortedSystems) {\r\n            if(filterFn(system)) {\r\n                results.push(system);\r\n                if(results.length >= count) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n    \r\n    getNearestStations(filterFn, count) {\r\n        let results = [];\r\n        if(arguments.length < 2) {\r\n            count = Number.POSITIVE_INFINITY;\r\n        }\r\n        else if(count <= 0) {\r\n            return results;\r\n        }\r\n        if(!filterFn) {\r\n            return this._sortedStations.slice(0, count);\r\n        }\r\n        for(let station of this._sortedStations) {\r\n            if(filterFn(station)) {\r\n                results.push(station);\r\n                if(results.length >= count) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n    \r\n    getNearestRingBodies(type, count) {\r\n        let results = [];\r\n        if(count <= 0) {\r\n            return results;\r\n        }\r\n        for(let body of this._sortedBodies) {\r\n            if(body.rings) {\r\n                for(let ring of body.rings) {\r\n                    if(!type || ring.type === type) {\r\n                        results.push(body);\r\n                        break;\r\n                    }\r\n                }\r\n                if(results.length >= count) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n    \r\n    _isSearchRelevant(query, text) {\r\n        if(!query || !text) {\r\n            return !!query;\r\n        }\r\n        let queryTerms = this._getSearchTerms(query);\r\n        let textTerms = this._getSearchTerms(text);\r\n        return queryTerms.some(q => textTerms.some(t => t.startsWith(q)));\r\n    }\r\n    \r\n    search(query) {\r\n        if(!query.trim()) {\r\n            return [];\r\n        }\r\n        let matches = this.searchOptions.filter(opt => opt.name && opt.name.toLowerCase() === query);\r\n        let results = [];\r\n        let terms = this._getSearchTerms(query);\r\n        if(!terms.length) {\r\n            return results;\r\n        }\r\n        \r\n        let minTermLen = 3 - terms.length;\r\n        let opts = this.searchOptions;\r\n        let optsLen = opts.length;\r\n        let termsLen = terms.length;\r\n        for(let i = 0; i < optsLen; i++) {\r\n            let opt = opts[i];\r\n            let hasAllTerms = true;\r\n            for(let j = 0; j < termsLen; j++) {\r\n                let term = terms[j];\r\n                let termLen = term.length;\r\n                if(termLen < minTermLen) {\r\n                    termLen = minTermLen;\r\n                }\r\n                \r\n                let optTerms = opt._searchTerms;\r\n                let optTermsLen = optTerms.length;\r\n                \r\n                let foundTerm = false;\r\n                for(let k = 0; k < optTermsLen; k++) {\r\n                    let optTerm = optTerms[k].substring(0, termLen);\r\n                    if(optTerm === term) {\r\n                        foundTerm = true;\r\n                    }\r\n                    if(optTerm >= term) {\r\n                        break;\r\n                    }\r\n                }\r\n                if(!foundTerm) {\r\n                    hasAllTerms = false;\r\n                    break;\r\n                }\r\n            }\r\n            if(hasAllTerms && !matches.includes(opt)) {\r\n                results.push(opt);\r\n            }\r\n        }\r\n        \r\n        results.sort((a, b) => (a._currentDistance || 0) - (b._currentDistance || 0));\r\n        return [...matches, ...results];\r\n    }\r\n}\r\n\r\nfunction getShipAttributes() {\r\n    return {\r\n    };\r\n}\r\n\r\nfunction getModuleAttributes() {\r\n    return {\r\n        'Group': this.groupName,\r\n        'Class': `${this.class}${this.rating}`,\r\n        'Ship': this.ship && this.ship.name,\r\n        'Category': this.category,\r\n        'Mode': this.mode,\r\n    };\r\n}\r\n\r\nfunction getSystemAttributes() {\r\n    return {\r\n        'Allegiance': this.allegiance,\r\n        'Power': this.power,\r\n        // 'Minor faction': this.faction,\r\n        'Power state': this.powerState,\r\n        'System state': this.states.join(', '),\r\n        'Resources': this.reserveType,\r\n        'Habitation': this.population ? 'Populated' : 'Unpopulated',\r\n        'Population': this.population,\r\n    };\r\n}\r\n\r\nfunction getStationAttributes() {\r\n    return {\r\n        'Type': this.Type,\r\n        'Economy': this.economies.join(', '),\r\n        'Services': this.services.join(', '),\r\n    };\r\n}\r\n\r\nfunction prepareData(data) {\r\n    for(let items of Object.values(data)) {\r\n        for(let item of Object.values(items)) {\r\n            for(let [key, ref] of Object.entries(item.$resolve)) {\r\n                let value = item[key];\r\n                if(Array.isArray(value)) {\r\n                    item[key] = value.map(v => data[ref][v]);\r\n                }\r\n                else {\r\n                    item[key] = data[ref][value];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\nexport async function loadGalaxy() {\r\n    console.log('Loading galaxy...');\r\n    \r\n    let data = prepareData((await api.get('data/galaxy.json')).data);\r\n    \r\n    let galaxy = new Galaxy(data);\r\n    \r\n    for(let ship of Object.values(galaxy.ships)) {\r\n        // ship._type = 'ship';////\r\n    \r\n        Object.defineProperty(ship, 'attributes', {get: getShipAttributes});\r\n        \r\n        galaxy._registerSearch('ship', ship);\r\n    }\r\n    for(let module of Object.values(galaxy.modules)) {\r\n        Object.defineProperty(module, 'attributes', {get: getModuleAttributes});\r\n        \r\n        galaxy._registerSearch('module', module);\r\n    }\r\n    for(let system of Object.values(galaxy.systems)) {\r\n        Object.defineProperty(system, 'attributes', {get: getSystemAttributes});\r\n        \r\n        galaxy.systems[system.name.toLowerCase()] = system;////\r\n        galaxy._sortedSystems.push(system);\r\n        \r\n        system.stations.sort((a, b) => a.starDistance - b.starDistance);///\r\n        system.bodies.sort((a, b) => a.starDistance - b.starDistance);///\r\n        \r\n        system._children = [...system.stations, ...system.bodies]\r\n            .sort((a, b) => a.starDistance - b.starDistance);///\r\n        \r\n        galaxy._registerSearch('system', system);\r\n    }\r\n    for(let station of Object.values(galaxy.stations)) {\r\n        Object.defineProperty(station, 'attributes', {get: getStationAttributes});\r\n        \r\n        galaxy._sortedStations.push(station);\r\n        \r\n        station._distanceModifier = station.starDistance * starDistanceFactor;\r\n        \r\n        galaxy._registerSearch('station', station);\r\n    }\r\n    for(let body of Object.values(data.bodies)) {\r\n        body._type = 'body'; ////////\r\n        \r\n        galaxy._sortedBodies.push(body);\r\n        \r\n        body._distanceModifier = body.starDistance * starDistanceFactor;\r\n    }\r\n    return galaxy;\r\n}\r\n\r\nlet currentGalaxyPromise = null;\r\n\r\nexport async function findGalaxy() {\r\n    if(!currentGalaxyPromise) {\r\n        currentGalaxyPromise = loadGalaxy();\r\n    }\r\n    return currentGalaxyPromise;\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Attributes(props) {\r\n    let {attributes, hideKeys} = props;\r\n    \r\n    if(!attributes) {\r\n        return null;\r\n    }\r\n    \r\n    return (<>\r\n        {Object.entries(attributes).filter(([, v]) => v).map(([k, v]) => (\r\n            <div key={k}>\r\n                {!hideKeys && k !== v && (\r\n                    <small className=\"text-secondary\">{k}:</small>\r\n                )}\r\n                <small className=\"text-muted d-inline-block\">{typeof v === 'number' ? v.toLocaleString() : v}</small>\r\n            </div>\r\n        ))}\r\n    </>);\r\n};\r\n","import React, {useContext, useState} from 'react';\r\nimport {FilterContext, SearchContext, SelectContext} from '../Contexts';\r\nimport Attributes from '../Attributes';\r\nimport {Swipeable} from 'react-swipeable';\r\n\r\nexport default function Item(props) {\r\n    let {handle, variant, icon, name, sub, below, detail, children} = props;\r\n    \r\n    let [isSelected, setSelected] = useState(false);\r\n    let [detailSelected, setDetailSelected] = useState(null);\r\n    \r\n    let filterContext = useContext(FilterContext);\r\n    let selectContext = useContext(SelectContext);\r\n    let searchContext = useContext(SearchContext);\r\n    \r\n    handle = handle || `${variant}${name}${sub}`;/////\r\n    if(!name) {\r\n        name = handle.name;\r\n    }\r\n    \r\n    if(selectContext.ancestors.includes(handle)) {\r\n        return null;\r\n    }\r\n    \r\n    if(selectContext.selected !== handle) {\r\n        isSelected = false;\r\n    }\r\n    else if(detailSelected) {\r\n        isSelected = true;\r\n    }\r\n    \r\n    if(!isSelected && selectContext.selected) {\r\n        variant = 'muted';\r\n    }\r\n    \r\n    function toggleSelected() {\r\n        setSelected(!isSelected);\r\n        selectContext.setSelected(isSelected ? null : handle);\r\n        setDetailSelected(null);///\r\n    }\r\n    \r\n    let relevantAttributes = null;\r\n    if(searchContext && handle.attributes) {\r\n        relevantAttributes = {};\r\n        Object.entries(handle.attributes).forEach(([k, v]) => {\r\n            if((!name || !name.includes(v)) && searchContext.isRelevant(v)) {\r\n                relevantAttributes[k] = v;\r\n            }\r\n        });\r\n    }\r\n    \r\n    let isFavorite = filterContext.favorites.includes(handle);/////\r\n    \r\n    function renderDetail() {\r\n        let subSelectContext = {\r\n            selected: detailSelected,\r\n            setSelected: item => setDetailSelected(item) & setSelected(true),\r\n            ancestors: [...selectContext.ancestors, handle],\r\n        };\r\n        return (\r\n            <SelectContext.Provider value={subSelectContext}>\r\n                <div className=\"p-2 pt-1\" style={{background: '#080808'}}>\r\n                    {detail && detail(subSelectContext)}\r\n                    {children}\r\n                </div>\r\n            </SelectContext.Provider>\r\n        );\r\n    }\r\n    \r\n    let borderColor = '#424345';\r\n    let favoriteColor = '#5b5ad5';\r\n    let borderStyle = 'solid 2px ' + (isFavorite ? favoriteColor : borderColor);\r\n    \r\n    return (\r\n        <div className=\"m-0 mb-1 rounded-lg\"\r\n             style={{\r\n                 background: isSelected ? '#333' : '#1A1A1A',\r\n                 borderLeft: detail ? `solid 6px ${!isSelected && selectContext.selected ? borderColor : isFavorite ? favoriteColor : '#76777A'}` : borderStyle,\r\n                 borderTop: borderStyle,\r\n                 borderRight: borderStyle,\r\n                 borderBottom: borderStyle,\r\n                 // animation: isFavorite && 'swipe-right .4s ease-out',\r\n             }}>\r\n            <Swipeable\r\n                onSwipedLeft={() => filterContext.removeFavorite(handle)}\r\n                onSwipedRight={() => filterContext.addFavorite(handle)}>\r\n                <div className=\"cursor-pointer p-2\"\r\n                     style={{\r\n                         opacity: !isSelected && selectContext.selected ? .8 : 1,/////\r\n                     }}\r\n                     onClick={selectContext && detail && (e => e.stopPropagation() & toggleSelected())}>\r\n                    <div className=\"d-flex\">\r\n                        {(icon || name) && (\r\n                            <span className={`m-0 text-${variant} flex-grow-1`}>\r\n                                {icon && (\r\n                                    <span\r\n                                        className=\"mr-2\"\r\n                                        style={{position: 'relative', top: '-2px', opacity: .9}}>\r\n                                        {icon}\r\n                                    </span>\r\n                                )}\r\n                                {name}\r\n                            </span>\r\n                        )}\r\n                        {sub && (\r\n                            <small className={`float-right text-${variant}`}\r\n                                   style={{marginTop: '2px', whiteSpace: 'nowrap', opacity: .9}}>\r\n                                {sub}\r\n                            </small>\r\n                        )}\r\n                    </div>\r\n                    {below}\r\n                    {!isSelected && relevantAttributes && (\r\n                        <Attributes hideKeys attributes={relevantAttributes}/>\r\n                    )}\r\n                </div>\r\n            </Swipeable>\r\n            {!isSelected && (<>\r\n                {children && (\r\n                    <div className=\"px-2\">\r\n                        {children}\r\n                    </div>\r\n                )}\r\n            </>)}\r\n            {isSelected && renderDetail()}\r\n        </div>\r\n    );\r\n};\r\n","import React, {useContext, useState} from 'react';\r\nimport {FilterContext} from './Contexts';\r\n\r\nexport default function ExpandableList(props) {\r\n    let {items, size, ignoreFilter, ignoreSort, render} = props;\r\n    \r\n    let [maxItems, setMaxItems] = useState(size || 1);\r\n    \r\n    let filterContext = useContext(FilterContext);\r\n    \r\n    if(!items || !items.length) {\r\n        return null;\r\n    }\r\n    \r\n    if(filterContext) {\r\n        if(!ignoreFilter) {\r\n            items = items.filter(filterContext.filter);\r\n        }\r\n        if(!ignoreSort) {\r\n            items = [...items.filter(x => filterContext.favorites.includes(x)), ...items.filter(x => !filterContext.favorites.includes(x))];\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"my-1\">\r\n            {items.slice(0, maxItems).map(render)}\r\n            {items.length > maxItems && (\r\n                <span className=\"btn btn-outline-secondary d-block mt-2\"\r\n                      onClick={() => setMaxItems(maxItems * 2)}>\r\n                    Show more\r\n                </span>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport StarSystem from './StarSystem';\r\nimport {GalaxyContext} from '../Contexts';\r\nimport Item from './Item';\r\nimport {GiDefenseSatellite, GiPlanetCore} from 'react-icons/all';\r\nimport Attributes from '../Attributes';\r\n\r\nexport default function Station(props) {\r\n    let {station} = props;\r\n    \r\n    let galaxy = useContext(GalaxyContext);\r\n    \r\n    station = galaxy.getStation(station);\r\n    if(!station) {\r\n        return <Item variant=\"secondary\" name={typeof props.station === 'string' ? props.station : '(Station)'}/>;\r\n    }\r\n    \r\n    let Icon = station.planetary ? GiPlanetCore : GiDefenseSatellite;\r\n    \r\n    return (\r\n        <Item variant=\"warning\"\r\n              handle={station}\r\n              icon={<Icon/>}\r\n              sub={station.starDistance ? station.starDistance.toLocaleString() + ' Ls' : ''}\r\n              detail={() => (\r\n                  <Attributes attributes={station.attributes}/>\r\n              )}>\r\n            {station.system && (\r\n                <StarSystem system={station.system}/>\r\n            )}\r\n        </Item>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport {SettingsContext} from './Contexts';\r\nimport {Form} from 'react-bootstrap';\r\n\r\nexport default function SettingToggle(props) {\r\n    let {setting, label, inverted, onToggle} = props;\r\n    \r\n    let settings = useContext(SettingsContext);\r\n    \r\n    function onClick(e) {\r\n        settings.set({[setting]: !settings[setting]});\r\n        if(onToggle) {\r\n            onToggle(e);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Form>\r\n            <Form.Group className=\"my-2\" onClick={onClick}>\r\n                <Form.Check readOnly checked={!!settings[setting] === !inverted} label={label || setting}/>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport Item from './Item';\r\nimport {GalaxyContext, SettingsContext} from '../Contexts';\r\nimport Attributes from '../Attributes';\r\nimport ExpandableList from '../ExpandableList';\r\nimport SearchResult from '../SearchResult';\r\nimport {GiInterceptorShip} from 'react-icons/all';\r\nimport SettingToggle from '../SettingToggle';\r\n\r\nexport default function Ship(props) {\r\n    let {ship} = props;\r\n    \r\n    let galaxy = useContext(GalaxyContext);\r\n    let settings = useContext(SettingsContext);\r\n    \r\n    ship = galaxy.getShip(ship);\r\n    \r\n    function detail({setSelected}) {\r\n        // let nearbyStations = galaxy._sortedSystems.flatMap(system => system.stations.filter(station => station.ships.includes(ship)));\r\n        let nearbyStations = galaxy.getNearestStations(s => s.ships.includes(ship));\r\n        if(settings.onlyDiscounts) {\r\n            nearbyStations = nearbyStations.filter(s => s.system.power === 'Li Yong-Rui');\r\n        }\r\n        return (<>\r\n            <Attributes attributes={ship.attributes}/>\r\n            {/*<h6 className=\"text-muted\">Purchase location:</h6>*/}\r\n            <SettingToggle setting=\"onlyDiscounts\" label=\"15% discount\" onToggle={() => setSelected(null)}/>\r\n            <ExpandableList items={nearbyStations} size={2} render={(station, i) => (\r\n                <SearchResult key={i} result={station}/>\r\n            )}/>\r\n        </>);\r\n    }\r\n    \r\n    return (\r\n        <Item variant=\"danger\"\r\n              handle={ship}\r\n              icon={<GiInterceptorShip/>}\r\n              sub={ship.pilot}\r\n              detail={detail}>\r\n        </Item>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport Item from './Item';\r\nimport {GalaxyContext, SettingsContext} from '../Contexts';\r\nimport ExpandableList from '../ExpandableList';\r\nimport SearchResult from '../SearchResult';\r\nimport Attributes from '../Attributes';\r\nimport Ship from './Ship';\r\nimport SettingToggle from '../SettingToggle';\r\n\r\nexport default function Module(props) {\r\n    let {module} = props;\r\n    \r\n    let galaxy = useContext(GalaxyContext);\r\n    let settings = useContext(SettingsContext);\r\n    \r\n    module = galaxy.getModule(module);\r\n    \r\n    function detail({setSelected}) {\r\n        // let nearbyStations = galaxy._sortedSystems.flatMap(system => system.stations.filter(station => station.modules.includes(module)));\r\n        let nearbyStations = galaxy.getNearestStations(s => s.modules.includes(module));\r\n        if(settings.onlyDiscounts) {\r\n            nearbyStations = nearbyStations.filter(s => s.system.power === 'Li Yong-Rui');\r\n        }\r\n        return (<>\r\n            {module.ship && (\r\n                <Ship ship={module.ship}/>\r\n            )}\r\n            <Attributes attributes={module.attributes}/>\r\n            {/*<h6 className=\"text-muted\">Purchase location:</h6>*/}\r\n            <SettingToggle setting=\"onlyDiscounts\" label=\"15% discount\" onToggle={() => setSelected(null)}/>\r\n            <ExpandableList items={nearbyStations} size={2} render={(station, i) => (\r\n                <SearchResult key={i} result={station}/>\r\n            )}/>\r\n        </>);\r\n    }\r\n    \r\n    return (\r\n        <Item variant=\"danger\"\r\n              handle={module}\r\n              name={`${module.class + module.rating} ${module.name}`}\r\n              sub={(module.ship && module.ship.name) || module.mode}\r\n              detail={detail}>\r\n        </Item>\r\n    );\r\n};\r\n","import React, {useContext} from 'react';\r\nimport StarSystem from './StarSystem';\r\nimport Item from './Item';\r\nimport {BsBrightnessLow, GiAsteroid, GiVibratingBall} from 'react-icons/all';\r\nimport {GalaxyContext} from '../Contexts';\r\nimport Attributes from '../Attributes';\r\n\r\nexport default function Body(props) {\r\n    let {body} = props;\r\n    \r\n    let galaxy = useContext(GalaxyContext);\r\n    \r\n    body = galaxy.getBody(body);\r\n    if(!body) {\r\n        return <Item variant=\"secondary\" name={typeof props.body === 'string' ? props.body : '(Body)'}/>;\r\n    }\r\n    \r\n    let system = galaxy.getSystem(body.system);\r\n    \r\n    let Icon = body.type && body.type.toLowerCase().includes('star') ? BsBrightnessLow : GiVibratingBall/*IoMdPlanet*/;\r\n    \r\n    return (\r\n        <Item\r\n            variant=\"success\"\r\n            handle={body}\r\n            icon={<Icon/>}\r\n            name={body.name || '(Body)'}\r\n            sub={body.starDistance ? body.starDistance.toLocaleString() + ' Ls' : ''}\r\n            below={<small className=\"text-muted\">{body.type}</small>}\r\n            detail={() => (<>\r\n                <Attributes attributes={body.attributes}/>\r\n                {body.rings && body.rings.map((ring, i) => (\r\n                    <Item\r\n                        key={i}\r\n                        variant=\"info\"\r\n                        handle={ring}\r\n                        name={ring.name}\r\n                        icon={<GiAsteroid/>}\r\n                        sub={ring.type}/>\r\n                ))}\r\n            </>)}>\r\n            {system && (\r\n                <StarSystem system={system}/>\r\n            )}\r\n        </Item>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport Station from './item/Station';\r\nimport Module from './item/Module';\r\nimport StarSystem from './item/StarSystem';\r\nimport Ship from './item/Ship';\r\nimport Body from './item/Body';\r\n\r\nconst resultMap = {\r\n    ship(result) {\r\n        return <Ship ship={result}/>;\r\n    },\r\n    module(result) {\r\n        return <Module module={result}/>;\r\n    },\r\n    system(result) {\r\n        return <StarSystem system={result}/>;\r\n    },\r\n    station(result) {\r\n        return <Station station={result}/>;\r\n    },\r\n    body(result) {\r\n        return <Body body={result}/>;\r\n    },\r\n};\r\n\r\nexport default function SearchResult(props) {\r\n    let {result} = props;\r\n    \r\n    let renderFn = resultMap[result._type];\r\n    if(!renderFn) {\r\n        console.error('[Search result]', result._type, result);\r\n        throw new Error('Unknown search result type: ' + result._type);\r\n    }\r\n    \r\n    return renderFn(result);\r\n};\r\n","import React, {useContext} from 'react';\r\nimport {GalaxyContext} from '../Contexts';\r\nimport Item from './Item';\r\nimport ExpandableList from '../ExpandableList';\r\nimport SearchResult from '../SearchResult';\r\nimport Attributes from '../Attributes';\r\nimport {BsBrightnessLow} from 'react-icons/all';\r\n\r\nexport default function StarSystem(props) {\r\n    let {system} = props;\r\n    \r\n    let galaxy = useContext(GalaxyContext);\r\n    \r\n    system = galaxy.getSystem(system);\r\n    if(!system) {\r\n        return <Item variant=\"secondary\" name={typeof props.system === 'string' ? props.system : '(System)'}/>;\r\n    }\r\n    \r\n    return (\r\n        <Item\r\n            // variant=\"info\"\r\n            handle={system}\r\n            icon={<BsBrightnessLow/>}\r\n            sub={system._currentDistance ? system._currentDistance.toLocaleString() + ' Ly' : null}\r\n            below={\r\n                system.permitRequired && (\r\n                    <small className=\"text-danger ml-2\">Permit required</small>\r\n                )}\r\n            detail={() => (<>\r\n                <Attributes attributes={system.attributes}/>\r\n                <ExpandableList items={system.stations} size={5} render={(item, i) => (\r\n                    <SearchResult key={i} result={item}/>\r\n                )}/>\r\n                {/*<ExpandableList items={system.bodies} size={5} render={(item, i) => (*/}\r\n                {/*    <SearchResult key={i} result={item}/>*/}\r\n                {/*)}/>*/}\r\n            </>)}>\r\n        </Item>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport Item from './Item';\r\nimport {capitalCase} from 'change-case';\r\n\r\nexport default function SignalSource(props) {\r\n    let {signalSource} = props;\r\n    \r\n    // let galaxy = useContext(GalaxyContext);\r\n    \r\n    return (\r\n        <Item\r\n            variant=\"muted\"\r\n            handle={signalSource}\r\n            name={`${capitalCase(signalSource.name)} (Threat ${signalSource.threat || 0})` || '(Unknown)'}>\r\n        \r\n        </Item>\r\n    );\r\n};\r\n","import React, {useState} from 'react';\r\nimport StarSystem from './StarSystem';\r\nimport {sentenceCase} from 'change-case';\r\nimport Item from './Item';\r\nimport Body from './Body';\r\nimport Ship from './Ship';\r\nimport SignalSource from './SignalSource';\r\nimport Station from './Station';\r\n\r\nexport default function JournalEntry(props) {\r\n    let {entry, internal} = props;\r\n\r\n    let [item, setItem] = useState(null);\r\n\r\n    function cached(obj) {\r\n        if(!item) {\r\n            setItem(obj);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    // let galaxy = useContext(GalaxyContext);\r\n\r\n    let name = sentenceCase(entry.event, {})\r\n        .replace('Uss', 'USS')\r\n        .replace('Fss', 'FSS')\r\n        .replace('Dss', 'DSS');\r\n\r\n    entry.StarSystem = entry.StarSystem || entry.SystemName;\r\n\r\n    let time = new Date(entry.timestamp);\r\n\r\n    let internalComponent = (<>\r\n        {entry.StarSystem && (\r\n            entry.StationName ? (\r\n                <Station station={[entry.StarSystem, entry.StationName]}/>\r\n            ) : entry.Body || entry.BodyName ? (\r\n                <Body body={cached(item || {\r\n                    _type: 'body',\r\n                    id: entry.BodyID,\r\n                    name: entry.Body || entry.BodyName,\r\n                    type: entry.PlanetClass || (entry.StarType && `${entry.StarType + entry.Subclass}-${entry.Luminosity} star`),\r\n                    system: entry.StarSystem,\r\n                    // starDistance: Math.round(entry.DistanceFromArrivalLS),\r\n                    attributes: {\r\n                        'Type': entry.PlanetClass,\r\n                        'Earth masses': entry.MassEM,\r\n                        'Atmosphere': sentenceCase(entry.Atmosphere || ''),\r\n                        'Volcanism': sentenceCase(entry.Volcanism || ''),\r\n                        'Landable': entry.Landable && 'Landable',\r\n                        'State': entry.TerraformState,\r\n                        'Discovered': !entry.wasDiscovered && 'Discovered',\r\n                    },\r\n                })}/>\r\n            ) : (\r\n                <StarSystem system={entry.StarSystem}/>\r\n            )\r\n        )}\r\n        {entry.Ship_Localised && (\r\n            <Ship ship={cached(item || {\r\n                _type: 'ship',\r\n                name: entry.Ship_Localised,\r\n                pilot: entry.PilotName_Localised || entry.Commander,\r\n            })}/>\r\n        )}\r\n        {entry.USSType_Localised && (\r\n            <SignalSource signalSource={cached(item || {\r\n                _type: 'signal',\r\n                name: entry.USSType_Localised,\r\n                threat: entry.USSThreat,\r\n            })}/>\r\n        )}\r\n    </>);\r\n\r\n    if(internal) {\r\n        return internalComponent;\r\n    }\r\n\r\n    return (\r\n        <Item variant=\"muted\"\r\n              handle={entry}\r\n              name={name}\r\n              below={(<>\r\n                  {entry.From_Localised && (\r\n                      <small className=\"text-secondary d-block\">{entry.From_Localised}:</small>\r\n                  )}\r\n                  {entry.Message_Localised && (\r\n                      <small className=\"text-muted d-block\">{entry.Message_Localised}</small>\r\n                  )}\r\n              </>)}\r\n              sub={time.getUTCHours().toString().padStart(2, '0') + ':' + time.getUTCMinutes().toString().padStart(2, '0')}>\r\n            {internalComponent}\r\n        </Item>\r\n    );\r\n};\r\n","const currentSystemEvents = ['Location', 'FSDJump', 'CarrierJump'];\r\n\r\nexport class Player {\r\n    constructor() {\r\n        this.name = null;\r\n        this.journal = [];\r\n        this.discoveries = [];\r\n        // this.timestamp = null;\r\n\r\n        // this.hasExtendedJournal = false;\r\n\r\n        this._currentSystem = null;\r\n    }\r\n\r\n    getLatest(event) {\r\n        for(let entry of this.journal) {\r\n            if(entry.event === event) {\r\n                return entry;\r\n            }\r\n        }\r\n    }\r\n\r\n    // getCurrentMaterials() {\r\n    //     let entry = this.getLatest('Materials');\r\n    //     return entry && ['Raw', 'Manufactured', 'Encoded']\r\n    //         .flatMap(type => entry[type].map(mat => [type, mat.Name, mat.Name_Localized, mat.Count]));\r\n    // }\r\n\r\n    getCurrentSystem(galaxy) {\r\n        return this._currentSystem && (galaxy.getSystem(this._currentSystem.name) || this._currentSystem);\r\n    }\r\n\r\n    update(data) {\r\n        if(data.journalEntries) {\r\n            data.journalEntries.forEach(entry => {\r\n                entry.timestamp = new Date(entry.timestamp).getTime();\r\n                let index = this.journal.findIndex(e => e.uid && e.uid === entry.uid);\r\n                if(index !== -1) {\r\n                    this.journal[index] = entry;\r\n                }\r\n                else {\r\n                    this.journal.unshift(entry);\r\n                }\r\n\r\n                if(entry.hasOwnProperty('WasDiscovered') && !entry.WasDiscovered && !entry.WasMapped) {\r\n                    index = this.discoveries.findIndex(e => e.BodyName === entry.BodyName);\r\n                    if(index !== -1) {\r\n                        let other = this.discoveries[index];\r\n                        if((entry.timestamp === other.timestamp ? entry.uid > other.uid : entry.timestamp > other.timestamp) && (entry.TerraformState || !other.TerraformState)) {\r\n                            this.discoveries[index] = entry;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.discoveries.unshift(entry);\r\n                    }\r\n                }\r\n            });\r\n            this.journal = this.journal.sort((a, b) => -(a.timestamp === b.timestamp ? a.uid - b.uid : a.timestamp - b.timestamp));\r\n\r\n            this.discoveries = this.discoveries.sort((a, b) => -(a.timestamp === b.timestamp ? a.uid - b.uid : a.timestamp - b.timestamp));//////////\r\n\r\n            // console.log(this.discoveries.filter(d=>d.TerraformState))///////\r\n\r\n            let commanderEntry = this.getLatest('Commander');\r\n            this.name = commanderEntry ? commanderEntry.Name : null;\r\n        }\r\n\r\n        // this.discoveries = this.journal.filter(entry => String(entry.WasDiscovered) === 'false');\r\n\r\n        this._currentSystem = null;\r\n        for(let entry of this.journal) {\r\n            if(currentSystemEvents.includes(entry.event)) {\r\n                this._currentSystem = {\r\n                    _type: 'system',\r\n                    name: entry.StarSystem || entry.SystemName,\r\n                    x: entry.StarPos[0],\r\n                    y: entry.StarPos[1],\r\n                    z: entry.StarPos[2],\r\n                    population: entry.Population,\r\n                    states: [],\r\n                    stations: [],\r\n                    bodies: [],\r\n                    attributes: {},\r\n                };\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Item from './Item';\r\nimport {IoMdArrowDropdown} from 'react-icons/all';\r\n\r\nexport default function Category(props) {\r\n    const {name, detail, children} = props;\r\n    \r\n    return (\r\n        <Item name={name} icon={<IoMdArrowDropdown/>} detail={detail}>\r\n            {children}\r\n        </Item>\r\n    );\r\n};\r\n","import React, {useState} from 'react';\r\n\r\nimport './App.scss';\r\nimport {Button, InputGroup, Tab, Tabs} from 'react-bootstrap';\r\nimport {sentenceCase} from 'change-case';\r\nimport {tryConnect} from '../services/connection-service';\r\nimport {FilterContext, GalaxyContext, SearchContext, SelectContext, SettingsContext} from './Contexts';\r\nimport {findGalaxy} from '../services/galaxy-service';\r\nimport JournalEntry from './item/JournalEntry';\r\nimport {Player} from '../services/player-service';\r\nimport {FiMapPin, FiRadio, FiSearch} from 'react-icons/all';\r\nimport SearchResult from './SearchResult';\r\nimport ExpandableList from './ExpandableList';\r\nimport StarSystem from './item/StarSystem';\r\nimport Body from './item/Body';\r\nimport Category from './item/Category';\r\nimport Station from './item/Station';\r\n\r\nlet connectionListener = null;\r\n\r\nlet allowAutoConnect = true;\r\n\r\nexport default function App() {\r\n    let [settings, setSettings] = useState(null);\r\n    let [player, setPlayer] = useState(null);\r\n    let [galaxy, setGalaxy] = useState(null);\r\n    let [connection, setConnection] = useState(null);\r\n    let [reconnecting, setReconnecting] = useState(null);\r\n    let [customSystemName, setCustomSystemName] = useState('');\r\n    let [currentTab, setCurrentTab] = useState(undefined);\r\n    let [searchQuery, setSearchQuery] = useState('');\r\n    let [searchResults, setSearchResults] = useState([]);\r\n    let [favorites, setFavorites] = useState([]);\r\n    let [selected, setSelected] = useState(null);\r\n\r\n    if(!settings) {\r\n        settings = {\r\n            set(changes) {\r\n                setSettings({...settings, ...changes});\r\n            },\r\n        };\r\n        setSettings(settings);\r\n    }\r\n\r\n    if(!player) {\r\n        player = new Player();\r\n        setPlayer(player);\r\n    }\r\n\r\n    function promptConnect() {\r\n        disconnect();\r\n        // bootbox.prompt({\r\n        //     title: 'Connect to IP address:',\r\n        //     value: connection ? connection.io.uri.replace('ws://', '') : localStorage['websocket'] || 'localhost',\r\n        //     callback: address => {\r\n        //         if(address) {\r\n        //             localStorage['websocket'] = address || '';\r\n        //             connect(address)\r\n        //                 .catch(err => console.error(err));\r\n        //         }\r\n        //     },\r\n        // });\r\n        connect()\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    async function connect(roomName) {\r\n        setReconnecting(true);\r\n        let connection = await tryConnect(roomName);\r\n        setConnection(connection);\r\n        setReconnecting(false);\r\n        // setCurrentTab('nearby');\r\n        return connection;\r\n    }\r\n\r\n    function disconnect() {\r\n        if(connection) {\r\n            connection.close();\r\n        }\r\n        // localStorage['websocket'] = '';\r\n        setConnection(null);\r\n        setReconnecting(false);\r\n        setPlayer(null);\r\n    }\r\n\r\n    // console.log(relativeSystem || '-', galaxy, player);///\r\n\r\n    if(connection) {\r\n        if(connectionListener) {\r\n            connection.removeListener('data', connectionListener);\r\n        }\r\n        connectionListener = data => {\r\n            if(data.msg) {\r\n                player.update(data.msg);\r\n            }\r\n            setPlayer(null);\r\n            if(!data.resetPlayer) {\r\n                setPlayer(player);\r\n            }\r\n        };\r\n        connection.on('data', connectionListener);\r\n    }\r\n    // useEffect(() => {\r\n    //     if(connection) {\r\n    //         return () => connection.removeListener('message', listener);\r\n    //     }\r\n    // });\r\n\r\n    if(/*storedAddress && */allowAutoConnect) {\r\n        allowAutoConnect = false;\r\n        let timeout = setTimeout(() => disconnect(), 1000);\r\n        connect()\r\n            .then(() => clearTimeout(timeout))\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    if(!galaxy) {\r\n        findGalaxy().then(galaxy => setGalaxy(galaxy));\r\n        return (\r\n            <div style={{marginTop: '20vh'}}>\r\n                <div style={{maxWidth: '960px', animationDuration: '1s'}}>\r\n                    <h4 className=\"text-center text-light mb-5 animate-fade-in\" style={{animationDuration: '1s'}}>\r\n                        Loading galaxy data...\r\n                    </h4>\r\n                    <img className=\"d-block mx-auto animate-fade-in\" style={{animationDuration: '4s'}}\r\n                         src=\"img/favicon.png\" alt=\"Loading...\"/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let playerSystem = player.getCurrentSystem(galaxy);\r\n    let relativeSystem = galaxy.setRelativeSystem(galaxy.getSystem(parseInt(customSystemName) ? null : customSystemName) || playerSystem || 'Sol');\r\n\r\n    currentTab = currentTab || (playerSystem ? 'nearby' : 'settings');///\r\n\r\n    let hideEvents = ['Music', 'FSSSignalDiscovered'];\r\n\r\n    function isEntryVisible(entry) {\r\n        return !hideEvents.includes(entry.event);\r\n    }\r\n\r\n    function doSearch(searchText) {\r\n        // setCurrentTab(searchText ? 'search' : undefined);\r\n        if(searchText) {\r\n            setCurrentTab('search');\r\n        }\r\n        else {\r\n            searchText = '';\r\n        }\r\n        setSearchQuery(searchText);\r\n        setSearchResults(galaxy.search(searchText));\r\n        setSelected(null);\r\n    }\r\n\r\n    function doFilter(item) {\r\n        // return item._type !== 'station' || item.type !== 'Fleet Carrier';\r\n        return true;\r\n    }\r\n\r\n    let searchBarElem = null;\r\n\r\n    function onSelectTab(tab) {\r\n        setCurrentTab(tab);\r\n        setSelected(null);\r\n        if(tab === 'search' && searchBarElem) {\r\n            if(currentTab === 'search' && searchBarElem.value) {\r\n                searchBarElem.value = '';\r\n                // setSearchQuery('');\r\n                // setSearchResults([]);\r\n                doSearch();\r\n            }\r\n            else {\r\n                searchBarElem.select();\r\n            }\r\n            searchBarElem.focus();\r\n        }\r\n    }\r\n\r\n    function isSearchRelevant(text) {\r\n        return galaxy._isSearchRelevant(searchQuery, text);\r\n    }\r\n\r\n    function addFavorite(item) {\r\n        if(!item._type) {\r\n            return;/////\r\n        }\r\n        setFavorites([item, ...favorites.filter(x => x !== item)]);\r\n    }\r\n\r\n    function removeFavorite(item) {\r\n        setFavorites(favorites.filter(x => x !== item));\r\n    }\r\n\r\n    return (\r\n        <SettingsContext.Provider value={settings}>\r\n            <SelectContext.Provider value={{selected, setSelected, ancestors: []}}>\r\n                <FilterContext.Provider value={{filter: doFilter, favorites, addFavorite, removeFavorite}}>\r\n                    <GalaxyContext.Provider value={galaxy}>\r\n                        <SearchContext.Provider value={{text: searchQuery, isRelevant: isSearchRelevant}}>\r\n                            <div className=\"p-2\">\r\n                                <div>\r\n                                    {player.name && (\r\n                                        <h6 className=\"text-primary float-right mt-1\">CMDR {player.name}</h6>\r\n                                    )}\r\n                                    <h5 className={'text-' + (relativeSystem.name.toLowerCase() === customSystemName.toLowerCase() ? 'success' :\r\n                                        playerSystem ? playerSystem && relativeSystem.name.toLowerCase() !== playerSystem.name.toLowerCase() ? 'danger' : 'info' : 'light')}>\r\n                                        {relativeSystem.name}\r\n                                    </h5>\r\n                                </div>\r\n                                <InputGroup size=\"lg\" className=\"mb-2\">\r\n                                    <input type=\"text\"\r\n                                           className=\"form-control\"\r\n                                           value={searchQuery}\r\n                                           placeholder={'Search...'}\r\n                                           ref={elem => searchBarElem = elem}\r\n                                        // onFocus={() => setCurrentTab('search')}\r\n                                           onChange={e => doSearch(e.target.value)}/>\r\n                                </InputGroup>\r\n                                <Tabs activeKey={currentTab}\r\n                                      onSelect={onSelectTab}>\r\n                                    <Tab eventKey=\"search\" title={<FiSearch className=\"h4 mt-1\"/>}>\r\n                                        {currentTab === 'search' && (\r\n                                            searchQuery ? (\r\n                                                <ExpandableList\r\n                                                    items={searchResults}\r\n                                                    size={20}\r\n                                                    // ignoreSort\r\n                                                    render={(result, i) => (\r\n                                                        <SearchResult key={i} result={result}/>\r\n                                                    )}/>\r\n                                            ) : (<>\r\n                                                <ExpandableList\r\n                                                    items={favorites}\r\n                                                    size={10}\r\n                                                    // ignoreSort\r\n                                                    render={(item, i) => (\r\n                                                        <SearchResult key={i} result={item}/>\r\n                                                    )}/>\r\n                                                <ExpandableList\r\n                                                    items={galaxy.getNearestSystems(() => s => !favorites.includes(s), 80)}\r\n                                                    size={10}\r\n                                                    // ignoreSort\r\n                                                    render={(item, i) => (\r\n                                                        <SearchResult key={i} result={item}/>\r\n                                                    )}/>\r\n                                            </>)\r\n                                        )}\r\n                                    </Tab>\r\n                                    <Tab eventKey=\"nearby\" title={<FiMapPin className=\"h4 mt-1\"/>}>\r\n                                        {currentTab === 'nearby' && (<>\r\n                                            <div className=\"mt-2\">\r\n                                                <Category name=\"Nearby stations\" detail={() => (\r\n                                                    <ExpandableList\r\n                                                        items={galaxy.getNearestStations()}\r\n                                                        size={3}\r\n                                                        // ignoreSort\r\n                                                        render={(station, i) => (\r\n                                                            <SearchResult key={i} result={station}/>\r\n                                                        )}/>\r\n                                                )}/>\r\n                                                <Category name=\"Pristine rings\" detail={() => (<>\r\n                                                    {/*<SettingToggle*/}\r\n                                                    {/*    setting=\"allResourceTypes\"*/}\r\n                                                    {/*    inverted*/}\r\n                                                    {/*    label=\"Pristine\"/>*/}\r\n                                                    {galaxy.ringTypes.map((type, i) => (\r\n                                                        <Category key={i} name={type} detail={() => (<>\r\n                                                            <ExpandableList\r\n                                                                items={galaxy.getNearestRingBodies(type).filter(b => settings.allResourceTypes || b.system.reserveType === 'Pristine')}\r\n                                                                size={2}\r\n                                                                // ignoreSort\r\n                                                                render={(body, i) => (\r\n                                                                    <Body key={i} body={body}/>\r\n                                                                )}/>\r\n                                                        </>)}/>\r\n                                                    ))}\r\n                                                </>)}/>\r\n                                                {/*<Category name=\"Material traders\" detail={() => (*/}\r\n                                                {/*    galaxy.materialTypes.map((type, i) => (*/}\r\n                                                {/*        <Category key={i} name={type} detail={() => (*/}\r\n                                                {/*            <ExpandableList*/}\r\n                                                {/*                items={galaxy.getNearestStations(s => s.services.includes(type + ' Material Trader'))}*/}\r\n                                                {/*                size={2}*/}\r\n                                                {/*                // ignoreSort*/}\r\n                                                {/*                render={(station, i) => (*/}\r\n                                                {/*                    <Station key={i} station={station}/>*/}\r\n                                                {/*                )}/>*/}\r\n                                                {/*        )}/>*/}\r\n                                                {/*    ))*/}\r\n                                                {/*)}/>*/}\r\n                                                <Category name=\"Services\" detail={() => (\r\n                                                    ['Interstellar Factors', 'Black Market', 'Technology Broker'].map((type, i) => (\r\n                                                        <Category key={i} name={sentenceCase(type)} detail={() => (\r\n                                                            <ExpandableList\r\n                                                                items={galaxy.getNearestStations(s => s.services.includes(type))}\r\n                                                                size={2}\r\n                                                                // ignoreSort\r\n                                                                render={(station, i) => (\r\n                                                                    <Station key={i} station={station}/>\r\n                                                                )}/>\r\n                                                        )}/>\r\n                                                    ))\r\n                                                )}/>\r\n                                                {/*******************/}\r\n                                                <SearchContext.Provider\r\n                                                    value={{isRelevant: v => v === 'Terraformable'}}>\r\n                                                    <ExpandableList\r\n                                                        items={(() => {\r\n                                                            let items = player.journal.filter(entry => (entry.TerraformState || entry.PlanetClass === 'Earthlike body' || entry.PlanetClass === 'Water world' || entry.PlanetClass === 'Ammonia world') && entry.StarSystem === relativeSystem.name).sort((a, b) => a.BodyName.localeCompare(b.BodyName));\r\n                                                            return items.filter((a, i) => items.slice(i + 1).every(b => a.BodyName !== b.BodyName));\r\n                                                        })()}\r\n                                                        size={10}\r\n                                                        render={(entry, i) => (\r\n                                                            <JournalEntry\r\n                                                                key={`${entry.timestamp}${i}`}\r\n                                                                internal\r\n                                                                entry={entry}/>\r\n                                                        )}/>\r\n                                                </SearchContext.Provider>\r\n                                            </div>\r\n                                        </>)}\r\n                                    </Tab>\r\n                                    <Tab eventKey=\"settings\" title={<FiRadio className=\"h4 mt-1\"/>}>\r\n                                        {currentTab === 'settings' && (<>\r\n                                            <div className=\"p-2\">\r\n                                                <div className=\"p-2\">\r\n                                                    <h5 className={'text-' + (customSystemName ? relativeSystem.name.toLowerCase() === customSystemName.toLowerCase() ? 'success' : 'danger' : 'light')}>\r\n                                                        Current system:\r\n                                                    </h5>\r\n                                                    <InputGroup size=\"md\" className=\"my-1\" style={{opacity: .8}}>\r\n                                                        <input type=\"text\"\r\n                                                               className=\"form-control\"\r\n                                                               value={customSystemName}\r\n                                                               placeholder=\"Choose populated system...\"\r\n                                                               onFocus={e => e.target.select()}\r\n                                                               onChange={e => doSearch(null) & setCustomSystemName(e.target.value)}/>\r\n                                                    </InputGroup>\r\n                                                    <StarSystem system={relativeSystem}/>\r\n                                                </div>\r\n                                                {!connection && (\r\n                                                    <Button\r\n                                                        size=\"lg\"\r\n                                                        variant={'outline-' + (connection ? 'light' : reconnecting ? 'warning' : 'info')}\r\n                                                        className=\"w-100 py-2 my-3\"\r\n                                                        style={{opacity: connection && .5}}\r\n                                                        onClick={() => connection ? disconnect() : promptConnect()}>\r\n                                                        {/*{connection ? 'Connected' : reconnecting ? 'Connecting...' : 'Connect'}*/}\r\n                                                        {reconnecting ? 'Connecting...' : 'Connect'}\r\n                                                    </Button>\r\n                                                )}\r\n                                                {!playerSystem ? (\r\n                                                    <a href=\"data/elite-navigator.exe\" target=\"_blank\">\r\n                                                        <Button\r\n                                                            variant=\"outline-light\"\r\n                                                            className=\"w-100 py-2 my-2\"\r\n                                                            style={{opacity: .7}}\r\n                                                            onClick={() => connect('localhost')}>\r\n                                                            Download location sync\r\n                                                        </Button>\r\n                                                    </a>\r\n                                                ) : (<>\r\n                                                    <br/>\r\n                                                    <Category name=\"Recent actions\" detail={() => (\r\n                                                        <ExpandableList\r\n                                                            items={player.journal.filter(isEntryVisible)}\r\n                                                            size={5}\r\n                                                            render={(entry, i) => (\r\n                                                                <JournalEntry key={`${entry.timestamp}${i}`}\r\n                                                                              entry={entry}/>\r\n                                                            )}/>\r\n                                                    )}/>\r\n                                                    <Category name=\"First discoveries\" detail={() => (<>\r\n                                                        <Category name=\"Everything\" detail={() => (\r\n                                                            <ExpandableList\r\n                                                                items={player.discoveries}\r\n                                                                size={10}\r\n                                                                render={(entry, i) => (\r\n                                                                    <JournalEntry\r\n                                                                        key={`${entry.timestamp}${i}`}\r\n                                                                        internal\r\n                                                                        entry={entry}/>\r\n                                                                )}/>\r\n                                                        )}/>\r\n                                                        <Category name=\"Terraformable\" detail={() => (\r\n                                                            <ExpandableList\r\n                                                                items={player.discoveries.filter(entry => entry.TerraformState)}\r\n                                                                size={10}\r\n                                                                render={(entry, i) => (\r\n                                                                    <JournalEntry\r\n                                                                        key={`${entry.timestamp}${i}`}\r\n                                                                        internal\r\n                                                                        entry={entry}/>\r\n                                                                )}/>\r\n                                                        )}/>\r\n                                                        <Category name=\"Earthlike\" detail={() => (\r\n                                                            <ExpandableList\r\n                                                                items={player.discoveries.filter(entry => entry.PlanetClass === 'Earthlike body')}\r\n                                                                size={10}\r\n                                                                render={(entry, i) => (\r\n                                                                    <JournalEntry\r\n                                                                        key={`${entry.timestamp}${i}`}\r\n                                                                        internal\r\n                                                                        entry={entry}/>\r\n                                                                )}/>\r\n                                                        )}/>\r\n                                                    </>)}/>\r\n                                                </>)}\r\n                                            </div>\r\n                                        </>)}\r\n                                    </Tab>\r\n                                </Tabs>\r\n                            </div>\r\n                        </SearchContext.Provider>\r\n                    </GalaxyContext.Provider>\r\n                </FilterContext.Provider>\r\n            </SelectContext.Provider>\r\n        </SettingsContext.Provider>\r\n    );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the src load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web src is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different src. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap';\r\nimport './style/index.scss';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your src to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}